{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#pipx-install-and-run-python-applications-in-isolated-environments","title":"pipx \u2014 Install and Run Python Applications in Isolated Environments","text":"<p>Documentation: https://pipx.pypa.io</p> <p>Source Code: https://github.com/pypa/pipx</p> <p>For comparison to other tools including pipsi, see Comparison to Other Tools.</p>"},{"location":"index.html#install-pipx","title":"Install pipx","text":"<p>[!WARNING]</p> <p>It is not recommended to install <code>pipx</code> via <code>pipx</code>. If you'd like to do this anyway, take a look at the <code>pipx-in-pipx</code> project and read about the limitations there.</p>"},{"location":"index.html#on-macos","title":"On macOS","text":"<pre><code>brew install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions with --global argument\n</code></pre> <p>Upgrade pipx with <code>brew update &amp;&amp; brew upgrade pipx</code>.</p>"},{"location":"index.html#on-linux","title":"On Linux","text":"<ul> <li>Ubuntu 23.04 or above</li> </ul> <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions with --global argument\n</code></pre> <ul> <li>Fedora:</li> </ul> <pre><code>sudo dnf install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions with --global argument\n</code></pre> <ul> <li>Arch:</li> </ul> <pre><code>sudo pacman -S python-pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions with --global argument\n</code></pre> <ul> <li>Using <code>pip</code> on other distributions:</li> </ul> <pre><code>python3 -m pip install --user pipx\npython3 -m pipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions with --global argument\n</code></pre> <p>Upgrade pipx with <code>python3 -m pip install --user --upgrade pipx</code>.</p>"},{"location":"index.html#on-windows","title":"On Windows","text":"<ul> <li>install via Scoop</li> </ul> <pre><code>scoop install pipx\npipx ensurepath\n</code></pre> <p>Upgrade pipx with <code>scoop update pipx</code>.</p> <ul> <li>install via pip (requires pip 19.0 or later)</li> </ul> <pre><code># If you installed python using Microsoft Store, replace `py` with `python3` in the next line.\npy -m pip install --user pipx\n</code></pre> <p>It is possible (even most likely) the above finishes with a WARNING looking similar to this:</p> <pre><code>WARNING: The script pipx.exe is installed in `&lt;USER folder&gt;\\AppData\\Roaming\\Python\\Python3x\\Scripts` which is not on PATH\n</code></pre> <p>If so, go to the mentioned folder, allowing you to run the pipx executable directly. Enter the following line (even if you did not get the warning):</p> <pre><code>.\\pipx.exe ensurepath\n</code></pre> <p>This will add both the above mentioned path and the <code>%USERPROFILE%\\.local\\bin</code> folder to your search path. Restart your terminal session and verify <code>pipx</code> does run.</p> <p>Upgrade pipx with <code>py -m pip install --user --upgrade pipx</code>.</p>"},{"location":"index.html#using-pipx-without-installing-via-zipapp","title":"Using pipx without installing (via zipapp)","text":"<p>You can also use pipx without installing it. The zipapp can be downloaded from Github releases and you can invoke it with a Python 3.8+ interpreter:</p> <pre><code>python pipx.pyz ensurepath\n</code></pre>"},{"location":"index.html#use-with-pre-commit","title":"Use with pre-commit","text":"<p>pipx has pre-commit support.</p>"},{"location":"index.html#shell-completions","title":"Shell completions","text":"<p>Shell completions are available by following the instructions printed with this command:</p> <pre><code>pipx completions\n</code></pre> <p>For more details, see the installation instructions.</p>"},{"location":"index.html#overview-what-is-pipx","title":"Overview: What is <code>pipx</code>?","text":"<p>pipx is a tool to help you install and run end-user applications written in Python. It's roughly similar to macOS's <code>brew</code>, JavaScript's npx, and Linux's <code>apt</code>.</p> <p>It's closely related to pip. In fact, it uses pip, but is focused on installing and managing Python packages that can be run from the command line directly as applications.</p>"},{"location":"index.html#how-is-it-different-from-pip","title":"How is it Different from pip?","text":"<p>pip is a general-purpose package installer for both libraries and apps with no environment isolation. pipx is made specifically for application installation, as it adds isolation yet still makes the apps available in your shell: pipx creates an isolated environment for each application and its associated packages.</p> <p>pipx does not ship with pip, but installing it is often an important part of bootstrapping your system.</p>"},{"location":"index.html#where-does-pipx-install-apps-from","title":"Where Does <code>pipx</code> Install Apps From?","text":"<p>By default, pipx uses the same package index as pip, PyPI. pipx can also install from all other sources pip can, such as a local directory, wheel, git url, etc.</p> <p>Python and PyPI allow developers to distribute code with \"console script entry points\". These entry points let users call into Python code from the command line, effectively acting like standalone applications.</p> <p>pipx is a tool to install and run any of these thousands of application-containing packages in a safe, convenient, and reliable way. In a way, it turns Python Package Index (PyPI) into a big app store for Python applications. Not all Python packages have entry points, but many do.</p> <p>If you would like to make your package compatible with pipx, all you need to do is add a console scripts entry point. If you're a poetry user, use these instructions. Or, if you're using hatch, try this.</p>"},{"location":"index.html#features","title":"Features","text":"<p><code>pipx</code> enables you to</p> <ul> <li>Expose CLI entrypoints of packages (\"apps\") installed to isolated environments with the <code>install</code> command. This   guarantees no dependency conflicts and clean uninstalls!</li> <li>Easily list, upgrade, and uninstall packages that were installed with pipx</li> <li>Run the latest version of a Python application in a temporary environment with the <code>run</code> command</li> </ul> <p>Best of all, pipx runs with regular user permissions, never calling <code>sudo pip install</code> (you aren't doing that, are you? \ud83d\ude04).</p>"},{"location":"index.html#walkthrough-installing-a-package-and-its-applications-with-pipx","title":"Walkthrough: Installing a Package and its Applications With <code>pipx</code>","text":"<p>You can globally install an application by running</p> <pre><code>pipx install PACKAGE\n</code></pre> <p>This automatically creates a virtual environment, installs the package, and adds the package's associated applications (entry points) to a location on your <code>PATH</code>. For example, <code>pipx install pycowsay</code> makes the <code>pycowsay</code> command available globally, but sandboxes the pycowsay package in its own virtual environment. pipx never needs to run as sudo to do this.</p> <p>Example:</p> <pre><code>&gt;&gt; pipx install pycowsay\n  installed package pycowsay 2.0.3, Python 3.10.3\n  These apps are now globally available\n    - pycowsay\ndone! \u2728 \ud83c\udf1f \u2728\n\n\n&gt;&gt; pipx list\nvenvs are in /home/user/.local/share/pipx/venvs\napps are exposed on your $PATH at /home/user/.local/bin\n   package pycowsay 2.0.3, Python 3.10.3\n    - pycowsay\n\n\n# Now you can run pycowsay from anywhere\n&gt;&gt; pycowsay mooo\n  ____\n&lt; mooo &gt;\n  ====\n         \\\n          \\\n            ^__^\n            (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre>"},{"location":"index.html#installing-from-source-control","title":"Installing from Source Control","text":"<p>You can also install from a git repository. Here, <code>black</code> is used as an example.</p> <pre><code>pipx install git+https://github.com/psf/black.git\npipx install git+https://github.com/psf/black.git@branch  # branch of your choice\npipx install git+https://github.com/psf/black.git@ce14fa8b497bae2b50ec48b3bd7022573a59cdb1  # git hash\npipx install https://github.com/psf/black/archive/18.9b0.zip  # install a release\n</code></pre> <p>The pip syntax with <code>egg</code> must be used when installing extras:</p> <pre><code>pipx install \"git+https://github.com/psf/black.git#egg=black[jupyter]\"\n</code></pre>"},{"location":"index.html#inject-a-package","title":"Inject a package","text":"<p>If an application installed by pipx requires additional packages, you can add them with pipx inject. For example, if you have <code>ipython</code> installed and want to add the <code>matplotlib</code> package to it, you would use:</p> <pre><code>pipx inject ipython matplotlib\n</code></pre> <p>You can inject multiple packages by specifying them all on the command line, or by listing them in a text file, with one package per line, or a combination. For example:</p> <pre><code>pipx inject ipython matplotlib pandas\n# or:\npipx inject ipython -r useful-packages.txt\n</code></pre>"},{"location":"index.html#walkthrough-running-an-application-in-a-temporary-virtual-environment","title":"Walkthrough: Running an Application in a Temporary Virtual Environment","text":"<p>This is an alternative to <code>pipx install</code>.</p> <p><code>pipx run</code> downloads and runs the above mentioned Python \"apps\" in a one-time, temporary environment, leaving your system untouched afterwards.</p> <p>This can be handy when you need to run the latest version of an app, but don't necessarily want it installed on your computer.</p> <p>You may want to do this when you are initializing a new project and want to set up the right directory structure, when you want to view the help text of an application, or if you simply want to run an app in a one-off case and leave your system untouched afterwards.</p> <p>For example, the blog post How to set up a perfect Python project uses <code>pipx run</code> to kickstart a new project with cookiecutter, a tool that creates projects from project templates.</p> <p>A nice side benefit is that you don't have to remember to upgrade the app since <code>pipx run</code> will automatically run a recent version for you.</p> <p>Okay, let's see what this looks like in practice!</p> <pre><code>pipx run APP [ARGS...]\n</code></pre> <p>This will install the package in an isolated, temporary directory and invoke the app. Give it a try:</p> <pre><code>&gt; pipx run pycowsay moo\n\n  ---\n&lt; moo &gt;\n  ---\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Notice that you don't need to execute any install commands to run the app.</p> <p>Any arguments after the application name will be passed directly to the application:</p> <pre><code>&gt; pipx run pycowsay these arguments are all passed to pycowsay!\n\n  -------------------------------------------\n&lt; these arguments are all passed to pycowsay! &gt;\n  -------------------------------------------\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre>"},{"location":"index.html#ambiguous-arguments","title":"Ambiguous arguments","text":"<p>Sometimes pipx can consume arguments provided for the application:</p> <pre><code>&gt; pipx run pycowsay --py\n\nusage: pipx run [-h] [--no-cache] [--pypackages] [--spec SPEC] [--verbose] [--python PYTHON]\n                [--system-site-packages] [--index-url INDEX_URL] [--editable] [--pip-args PIP_ARGS]\n                app ...\npipx run: error: ambiguous option: --py could match --pypackages, --python\n</code></pre> <p>To prevent this put double dash <code>--</code> before APP. It will make pipx to forward the arguments to the right verbatim to the application:</p> <pre><code>&gt; pipx run -- pycowsay --py\n\n\n  ----\n&lt; --py &gt;\n  ----\n   \\   ^__^\n    \\  (oo)\\_______\n       (__)\\       )\\/\\\n           ||----w |\n           ||     ||\n</code></pre> <p>Re-running the same app is quick because pipx caches Virtual Environments on a per-app basis. The caches only last a few days, and when they expire, pipx will again use the latest version of the package. This way you can be sure you're always running a new version of the package without having to manually upgrade.</p>"},{"location":"index.html#package-with-multiple-apps-or-the-app-name-doesnt-match-the-package-name","title":"Package with multiple apps, or the app name doesn't match the package name","text":"<p>If the app name does not match the package name, you can use the <code>--spec</code> argument to specify the <code>PACKAGE</code> name, and provide the <code>APP</code> to run separately:</p> <pre><code>pipx run --spec PACKAGE APP\n</code></pre> <p>For example, the esptool package doesn't provide an executable with the same name:</p> <pre><code>&gt;&gt; pipx run esptool\n'esptool' executable script not found in package 'esptool'.\nAvailable executable scripts:\n    esp_rfc2217_server.py - usage: 'pipx run --spec esptool esp_rfc2217_server.py [arguments?]'\n    espefuse.py - usage: 'pipx run --spec esptool espefuse.py [arguments?]'\n    espsecure.py - usage: 'pipx run --spec esptool espsecure.py [arguments?]'\n    esptool.py - usage: 'pipx run --spec esptool esptool.py [arguments?]'\n</code></pre> <p>You can instead run the executables that this package provides by using <code>--spec</code>:</p> <pre><code>pipx run --spec esptool esp_rfc2217_server.py\npipx run --spec esptool espefuse.py\npipx run --spec esptool espsecure.py\npipx run --spec esptool esptool.py\n</code></pre> <p>Note that the <code>.py</code> extension is not something you append to the executable name. It is part of the executable name, as provided by the package. This can be anything. For example, when working with the pymodbus package:</p> <pre><code>&gt;&gt; pipx run pymodbus[repl]\n'pymodbus' executable script not found in package 'pymodbus'.\nAvailable executable scripts:\n    pymodbus.console - usage: 'pipx run --spec pymodbus pymodbus.console [arguments?]'\n    pymodbus.server - usage: 'pipx run --spec pymodbus pymodbus.server [arguments?]'\n    pymodbus.simulator - usage: 'pipx run --spec pymodbus pymodbus.simulator [arguments?]'\n</code></pre> <p>You can run the executables like this:</p> <pre><code>pipx run --spec pymodbus[repl] pymodbus.console\npipx run --spec pymodbus[repl] pymodbus.server\npipx run --spec pymodbus[repl] pymodbus.simulator\n</code></pre>"},{"location":"index.html#running-a-specific-version-of-a-package","title":"Running a specific version of a package","text":"<p>The <code>PACKAGE</code> argument above is actually a requirement specifier. Therefore, you can also specify specific versions, version ranges, or extras. For example:</p> <pre><code>pipx run mpremote==1.20.0\npipx run --spec esptool==4.6.2 esptool.py\npipx run --spec 'esptool&gt;=4.5' esptool.py\npipx run --spec 'esptool &gt;= 4.5' esptool.py\n</code></pre> <p>Notice that some requirement specifiers have to be enclosed in quotes or escaped.</p>"},{"location":"index.html#running-from-source-control","title":"Running from Source Control","text":"<p>You can also run from a git repository. Here, <code>black</code> is used as an example.</p> <pre><code>pipx run --spec git+https://github.com/psf/black.git black\npipx run --spec git+https://github.com/psf/black.git@branch black  # branch of your choice\npipx run --spec git+https://github.com/psf/black.git@ce14fa8b497bae2b50ec48b3bd7022573a59cdb1 black  # git hash\npipx run --spec https://github.com/psf/black/archive/18.9b0.zip black # install a release\n</code></pre>"},{"location":"index.html#running-from-url","title":"Running from URL","text":"<p>You can run .py files directly, too.</p> <pre><code>pipx run https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py\npipx is working!\n</code></pre>"},{"location":"index.html#summary","title":"Summary","text":"<p>That's it! Those are the most important commands <code>pipx</code> offers. To see all of pipx's documentation, run <code>pipx --help</code> or see the docs.</p>"},{"location":"index.html#testimonials","title":"Testimonials","text":"\"Thanks for improving the workflow that pipsi has covered in the past. Nicely done!\"  \u2014Jannis Leidel, PSF fellow, former pip and Django core developer, and founder of the Python Packaging Authority (PyPA)   \"My setup pieces together pyenv, poetry, and pipx. [...] For the things I need, it\u2019s perfect.\"  \u2014Jacob Kaplan-Moss, co-creator of Django in blog post My Python Development Environment, 2020 Edition  \"I'm a big fan of pipx. I think pipx is super cool.\"  \u2014Michael Kennedy, co-host of PythonBytes podcast in episode 139"},{"location":"index.html#credits","title":"Credits","text":"<p>pipx was inspired by pipsi and npx. It was created by Chad Smith and has had lots of help from contributors. The logo was created by @IrishMorales.</p> <p>pipx is maintained by a team of volunteers (in alphabetical order)</p> <ul> <li>Bern\u00e1t G\u00e1bor</li> <li>Chad Smith - co-lead maintainer</li> <li>Chrysle</li> <li>Jason Lam</li> <li>Matthew Clapp - co-lead maintainer</li> <li>Robert Offner</li> <li>Tzu-ping Chung</li> </ul>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Issues and Pull Requests are definitely welcome! Check out Contributing to get started. Everyone who interacts with the pipx project via codebase, issue tracker, chat rooms, or otherwise is expected to follow the PSF Code of Conduct.</p>"},{"location":"changelog.html","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p> <p>This project uses towncrier for keeping the changelog. DO NOT commit any changes to this file.</p>"},{"location":"changelog.html#160-2024-06-01","title":"1.6.0 - 2024-06-01","text":""},{"location":"changelog.html#features","title":"Features","text":"<ul> <li>Add <code>install-all</code> command to install packages according to spec metadata file. (#687)</li> <li>Introduce <code>pipx pin</code> and <code>pipx unpin</code> commands, which can be used to pin or unpin the version   of an installed package, so it will not be upgraded by <code>pipx upgrade</code> or <code>pipx upgrade-all</code>. (#891)</li> <li>Add a new option <code>--pinned</code> to <code>pipx list</code> command for listing pinned packages only. (#891)</li> <li>Add <code>pipx interpreter upgrade</code> command to upgrade local standalone python in micro/patch level (#1249)</li> <li>Add <code>--requirement</code> option to <code>inject</code> command to read list of packages from a text file. (#1252)</li> <li>Add <code>pipx upgrade-shared</code> command, to create/upgrade shared libraries as a standalone command. (#1316)</li> <li>Allow <code>upgrade</code> command to accept multiple packages as arguments. (#1336)</li> <li>Support Python version for <code>--python</code> arg when py launcher is not available (#1342)</li> <li>Make <code>install-all</code> gather errors in batch (#1348)</li> </ul>"},{"location":"changelog.html#bugfixes","title":"Bugfixes","text":"<ul> <li>Resolve the <code>DEFAULT_PYTHON</code> to the actual absolute path (#965)</li> <li>Fix error log overwrite for \"-all\" batch operations. (#1132)</li> <li>Do not reinstall already injected packages without <code>--force</code> being passed. (#1300)</li> <li>Only show <code>--python</code> and <code>--force</code> flag warning if both flags are present (#1304)</li> <li>Don't allow paths to be passed into <code>pipx reinstall</code>, as this might wreak havoc. (#1324)</li> <li>Make the Python <code>venv</code> module arguments work with <code>upgrade --install</code> (#1344)</li> <li>Fix version check for standalone python (#1349)</li> <li>Validate package(s) argument should not be path(s). (#1354)</li> <li>Validate whether a package is an URL correctly. (#1355)</li> <li>Support python3.8 for standalone python builds (#1375)</li> <li>Install specified version of <code>--preinstall</code> dependency instead of latest version (#1377)</li> <li>Move <code>--global</code> option into shared parser, such that it can be passed after the subcommand, for example <code>pipx ensurepath --global</code>. (#1397)</li> <li>Fix discovery of a <code>pipx run</code> entry point if a local path was given as package. (#1422)</li> </ul>"},{"location":"changelog.html#improved-documentation","title":"Improved Documentation","text":"<ul> <li>Create a dedicated section for manual pages and add an example with <code>pdm-backend</code>. (#1312)</li> <li>Add example, test and cli help description how to install multiple packages with the --preinstall flag (#1321)</li> <li>Refine docs generation script and template. (#1325)</li> <li>Add a note about sourcing the shell config file for <code>ensure_path</code> (#1346)</li> </ul>"},{"location":"changelog.html#150-2024-03-29","title":"1.5.0 - 2024-03-29","text":""},{"location":"changelog.html#features_1","title":"Features","text":"<ul> <li>Add <code>--global</code> option to <code>pipx</code> commands.<ul> <li>This will run the action in a global scope and affect environment for all system users. (#754)</li> </ul> </li> <li>Add a <code>--fetch-missing-python</code> flag to all commands that accept a <code>--python</code> flag.<ul> <li>When combined, this will automatically download a standalone copy of the requested python version if it's not already available on the user's system. (#1242)</li> </ul> </li> <li>Add commands to list and prune standalone interpreters (#1248)</li> <li>Revert platform-specific directories on MacOS and Windows<ul> <li>They were leading to a lot of issues with Windows sandboxing and spaces in shebangs on MacOS. (#1257)</li> </ul> </li> <li>Add <code>--install</code> option to <code>pipx upgrade</code> command.<ul> <li>This will install the package given as argument if it is not already installed. (#1262)</li> </ul> </li> </ul>"},{"location":"changelog.html#bugfixes_1","title":"Bugfixes","text":"<ul> <li>Correctly resolve home directory in pipx directory environment variables. (#94)</li> <li>Pass through <code>pip</code> arguments when upgrading shared libraries. (#964)</li> <li>Fix installation issues when files in the working directory interfere with venv creation process. (#1091)</li> <li>Report correct filename in tracebacks with <code>pipx run &lt;scriptname&gt;</code> (#1191)</li> <li>Let self-managed pipx uninstall itself on windows again. (#1203)</li> <li>Fix path resolution for python executables looked up in PATH on windows. (#1205)</li> <li>Display help message when <code>pipx install</code> is run without arguments. (#1266)</li> <li>Fix crashes due to superfluous <code>-q</code> flags by discarding exceeding values (#1283)</li> </ul>"},{"location":"changelog.html#improved-documentation_1","title":"Improved Documentation","text":"<ul> <li>Update the completion instructions for zipapp users. (#1072)</li> <li>Update the example for running scripts with dependencies. (#1227)</li> <li>Update the docs for package developers on the use of configuration using pyproject.toml (#1229)</li> <li>Add installation instructions for Fedora (#1239)</li> <li>Update the examples for installation from local dir (#1277)</li> <li>Fix inconsistent wording in <code>pipx install</code> command description. (#1307)</li> </ul>"},{"location":"changelog.html#deprecations-and-removals","title":"Deprecations and Removals","text":"<ul> <li>Deprecate <code>--skip-maintenance</code> flag of <code>pipx list</code>; maintenance is now never executed there (#1256)</li> </ul>"},{"location":"changelog.html#misc","title":"Misc","text":"<ul> <li>#1296</li> </ul>"},{"location":"changelog.html#143-2024-01-16","title":"1.4.3 - 2024-01-16","text":""},{"location":"changelog.html#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Autofix python version for pylauncher, when version is provided prefixed with <code>python</code> (#1150)</li> <li>Support building pipx wheels with setuptools-scm&lt;7, such as on FreeBSD. (#1208)</li> </ul>"},{"location":"changelog.html#improved-documentation_2","title":"Improved Documentation","text":"<ul> <li>Provide useful error messages when unresolvable python version is passed (#1150)</li> <li>Introduce towncrier for managing the changelog (#1161)</li> <li>Add workaround for using pipx applications in shebang under macOS (#1198)</li> </ul>"},{"location":"changelog.html#142","title":"1.4.2","text":""},{"location":"changelog.html#features_2","title":"Features","text":"<ul> <li>Allow skipping maintenance tasks during list command</li> <li>Raise more user friendly error when provided <code>--python</code> version is not found</li> <li>Update <code>pipx run</code> on scripts using <code>/// script</code> and no <code>run</code> table following the updated version of PEP 723 (#1180)</li> </ul>"},{"location":"changelog.html#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Include <code>tomli</code> into <code>pipx.pyz</code> (zipapp) so that it can be executed with Python 3.10 or earlier (#1142)</li> <li>Fix resolving the python executable path on linux</li> <li><code>pipx run</code>: Verify whether the script name provided is a file before running it</li> <li>Avoid repeated exception logging in a few rare cases (#1192)</li> </ul>"},{"location":"changelog.html#141","title":"1.4.1","text":""},{"location":"changelog.html#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Set default logging level to WARNING, so debug log messages won't be shown without passing additional flags such as <code>--verbose</code></li> </ul>"},{"location":"changelog.html#140","title":"1.4.0","text":""},{"location":"changelog.html#features_3","title":"Features","text":"<ul> <li>Add <code>--quiet</code> and <code>--verbose</code> options for the <code>pipx</code> subcommands</li> <li>Add ability to install multiple packages at once</li> <li>Delete directories directly instead of spawning rmdir on Windows</li> </ul>"},{"location":"changelog.html#improved-documentation_3","title":"Improved Documentation","text":"<ul> <li>Add Scoop installation instructions</li> </ul>"},{"location":"changelog.html#bugfixes_5","title":"Bugfixes","text":"<ul> <li>\"Failed to delete\" error when using Microsoft Store Python</li> <li>\"No pyvenv.cfg file\" error when using Microsoft Store Python (#1164)</li> </ul>"},{"location":"changelog.html#133","title":"1.3.3","text":""},{"location":"changelog.html#improved-documentation_4","title":"Improved Documentation","text":"<ul> <li>Make the logo more visible in dark mode</li> </ul>"},{"location":"changelog.html#132","title":"1.3.2","text":""},{"location":"changelog.html#features_4","title":"Features","text":"<ul> <li>The project version number is now dynamic and generated from the VCS at build time</li> </ul>"},{"location":"changelog.html#improved-documentation_5","title":"Improved Documentation","text":"<ul> <li>Add additional example for --pip-args option, to docs/examples.md</li> </ul>"},{"location":"changelog.html#131","title":"1.3.1","text":""},{"location":"changelog.html#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Fix combining of --editable and --force flag</li> </ul>"},{"location":"changelog.html#130","title":"1.3.0","text":""},{"location":"changelog.html#features_5","title":"Features","text":"<ul> <li>Allow running <code>pip</code> with <code>pipx run</code></li> <li>Add <code>--with-suffix</code> for <code>pipx inject</code> command</li> <li><code>pipx install</code>: emit a warning when <code>--force</code> and <code>--python</code> were passed at the same time</li> <li>Add explicit 3.12 support</li> <li>Make usage message in <code>pipx run</code> show <code>package_or_url</code>, so extra will be printed out as well</li> <li>Use the py launcher, if available, to select Python version with the <code>--python</code> option</li> <li>add pre-commit hook support</li> <li>Add <code>pipx install --preinstall</code> to support preinstalling build requirements</li> <li>Return an error message when directory can't be added to PATH successfully</li> <li>Expose manual pages included in an application installed with <code>pipx install</code></li> <li>Check whether pip module exists in shared lib before performing any actions, such as <code>reinstall-all</code>.</li> <li>Drop <code>setuptools</code> and <code>wheel</code> from the shared libraries. This results in less time consumption when the libraries are   automatically upgraded.</li> <li>Support inline script metadata   in <code>pipx run</code>.</li> <li>Imply <code>--include-apps</code> when running <code>pipx inject --include-deps</code></li> <li>Add <code>--force-reinstall</code> to pip arguments when <code>--force</code> was passed</li> <li>Support including requirements in scripts run using <code>pipx run</code> (#916)</li> <li>Pass <code>pip_args</code> to <code>shared_libs.upgrade()</code></li> <li>Fallback to user's log path if the default log path (<code>$PIPX_HOME/logs</code>) is not writable to aid with pipx being used   for multi-user (e.g. system-wide) installs of applications</li> <li>Don't show escaped backslashes for paths in console output</li> <li>Move <code>pipx</code> paths to ensure compatibility with the platform-specific user directories</li> <li>Pass <code>--no-input</code> to pip when output is not piped to parent stdout</li> <li>Print all environment variables in <code>pipx environment</code></li> </ul>"},{"location":"changelog.html#improved-documentation_6","title":"Improved Documentation","text":"<ul> <li>Add more examples for <code>pipx run</code></li> <li>Add subsection to make README easier to read</li> </ul>"},{"location":"changelog.html#deprecations-and-removals_1","title":"Deprecations and Removals","text":"<ul> <li>Drop support for Python 3.7</li> </ul>"},{"location":"changelog.html#bugfixes_7","title":"Bugfixes","text":"<ul> <li>Fix wrong interpreter usage when injecting local pip-installable dependencies into venvs</li> <li>Fix program name in generated manual page</li> </ul>"},{"location":"changelog.html#121","title":"1.2.1","text":""},{"location":"changelog.html#bugfixes_8","title":"Bugfixes","text":"<ul> <li>Fix compatibility to packaging 23.2+ by removing reliance on packaging's requirement validation logic and detecting a   URL-based requirement in pipx. (#1070)</li> </ul>"},{"location":"changelog.html#120","title":"1.2.0","text":""},{"location":"changelog.html#features_6","title":"Features","text":"<ul> <li>Add <code>pipx uninject</code> command (#820)</li> <li>Ship a zipapp of pipx</li> <li>Match pip's behaviour when package name ends with archive extension (treat it as a path)</li> <li>Change the program name to <code>path/to/python -m pipx</code> when running as <code>python -m pipx</code></li> <li>Improve the detection logic for MSYS2 to avoid entering infinite loop (#908) (#938)</li> <li>Remove extra trailing quote from exception message</li> <li>Fix EncodingWarning in <code>pipx_metadata_file</code>.</li> </ul>"},{"location":"changelog.html#improved-documentation_7","title":"Improved Documentation","text":"<ul> <li>Add an example for installation from source with extras</li> <li>Fix <code>pipx run</code> examples and update Python versions used by <code>pipx install</code> examples</li> </ul>"},{"location":"changelog.html#bugfixes_9","title":"Bugfixes","text":"<ul> <li>Add test for pip module in <code>pipx reinstall</code> to fix an issue with <code>pipx reinstall-all</code> (#935)</li> </ul>"},{"location":"changelog.html#110","title":"1.1.0","text":""},{"location":"changelog.html#features_7","title":"Features","text":"<ul> <li>Add <code>pipx environment</code> command (#793)</li> <li>Add <code>list --short</code> option to list only package names (#804)</li> <li>Improve the behaviour of <code>shlex.split</code> on Windows, so paths on Windows can be handled properly when they are passed in   <code>--pip-args</code>. (#794)</li> <li>[dev] Change github action job names</li> <li>Add additional examples for installation from git repos</li> <li>[packaging] Switch to PEP 621</li> <li>Add a CACHEDIR.TAG to the cache directory to prevent it from being included in archives and backups. For more   information about cache directory tags, see https://bford.info/cachedir</li> </ul>"},{"location":"changelog.html#bugfixes_10","title":"Bugfixes","text":"<ul> <li>Fix encoding issue on Windows when pip fails to install a package</li> </ul>"},{"location":"changelog.html#improved-documentation_8","title":"Improved Documentation","text":"<ul> <li>Add more examples</li> <li>Fix the command for   installing development version. (#801)</li> <li>Fix test status badge in readme file</li> </ul>"},{"location":"changelog.html#100","title":"1.0.0","text":""},{"location":"changelog.html#features_8","title":"Features","text":"<ul> <li>Support argcomplete 2.0.0 (#790)</li> <li>Include machinery to build a manpage for pipx with argparse-manpage.</li> <li>Add better handling for 'app not found' when a single app is present in the project, and an improved error message   (#733)</li> </ul>"},{"location":"changelog.html#bugfixes_11","title":"Bugfixes","text":"<ul> <li>Fixed animations sending output to stdout, which can break JSON output. (#769)</li> <li>Fix typo in <code>pipx upgrade-all</code> output</li> </ul>"},{"location":"changelog.html#0170","title":"0.17.0","text":"<ul> <li>Support <code>pipx run</code> with version constraints and extras. (#697)</li> </ul>"},{"location":"changelog.html#0165","title":"0.16.5","text":"<ul> <li>Fixed <code>pipx list</code> output phrasing to convey that python version displayed is the one with which package was installed.</li> <li>Fixed <code>pipx install</code> to provide return code 0 if venv already exists, similar to pip\u2019s behavior. (#736)</li> <li>[docs] Update ansible's install command in   Programs to Try document to work with Ansible 2.10+ (#742)</li> </ul>"},{"location":"changelog.html#0164","title":"0.16.4","text":"<ul> <li>Fix to <code>pipx ensurepath</code> to fix behavior in user locales other than UTF-8, to fix #644. The internal change is to use   userpath v1.6.0 or greater. (#700)</li> <li>Fix virtual environment inspection for Python releases that uses an int for its release serial number. (#706)</li> <li>Fix PermissionError in windows when pipx manages itself. (#718)</li> </ul>"},{"location":"changelog.html#0163","title":"0.16.3","text":"<ul> <li>Organization: pipx is extremely pleased to now be a project of the Python Packaging Authority (PyPA)! Note that our   github URL has changed to pypa/pipx</li> <li>Fixed <code>pipx list --json</code> to return valid json with no venvs installed. Previously would return an empty string to   stdout. (#681)</li> <li>Changed <code>pipx ensurepath</code> bash behavior so that only one of {<code>~/.profile</code>, <code>~/.bash\\_profile</code>} is modified with the   extra pipx paths, not both. Previously, if a <code>.bash_profile</code> file was created where one didn't exist, it could cause   problems, e.g. #456. The internal change is to use userpath v1.5.0 or greater. (#684)</li> <li> <p>Changed default nox tests, Github Workflow tests, and pytest behavior to use local pypi server with fixed lists of   available packages. This allows greater test isolation (no network pypi access needed) and determinism (fixed   available dependencies.) It also allows running the tests offline with some extra preparation beforehand (See   Running Unit Tests Offline). The old style   tests that use the internet to access pypi.org are still available using <code>nox -s tests_internet</code> or   <code>pytest --net-pypiserver tests</code>. (#686)</p> </li> <li> <p>Colorama is now only installed on Windows. (#691)</p> </li> </ul>"},{"location":"changelog.html#01621","title":"0.16.2.1","text":"<ul> <li>Changed non-venv-info warnings and notices from <code>pipx list</code> to print to stderr. This especially prevents   <code>pipx list --json</code> from printing invalid json to stdout. (#680)</li> <li>Fixed bug that could cause uninstall on Windows with injected packages to uninstall too many apps from the local   binary directory. (#679)</li> </ul>"},{"location":"changelog.html#01620","title":"0.16.2.0","text":"<ul> <li>Fixed bug #670 where uninstalling a venv could erroneously uninstall other apps from the local binary directory.   (#672)</li> <li>Added <code>--json</code> switch to <code>pipx list</code> to output rich json-metadata for all venvs.</li> <li>Ensured log files are utf-8 encoded to prevent Unicode encoding errors from occurring with emojis. (#646)</li> <li>Fixed issue which made pipx incorrectly list apps as part of a venv when they were not installed by pipx. (#650)</li> <li>Fixed old regression that would prevent pipx uninstall from cleaning up linked binaries if the venv was old and did   not have pipx metadata. (#651)</li> <li>Fixed bugs with suffixed-venvs on Windows. Now properly summarizes install, and actually uninstalls associated   binaries for suffixed-venvs. (#653)</li> <li>Changed venv minimum python version to 3.6, removing python 3.5 which is End of Life. (#666)</li> </ul>"},{"location":"changelog.html#01610","title":"0.16.1.0","text":"<ul> <li>Introduce the <code>pipx.run</code> entry point group as an alternative way to declare an application for <code>pipx run</code>.</li> <li>Fix cursor show/hide to work with older versions of Windows. (#610)</li> <li>Support text colors on Windows. (#612)</li> <li>Better platform unicode detection to avoid errors and allow showing emojis when possible. (#614)</li> <li>Don't emit show cursor or hide cursor codes if STDERR is not a tty. (#620)</li> <li>Sped up <code>pipx list</code> (#624).</li> <li>pip errors no longer stream to the shell when pip fails during a pipx install. pip's output is now saved to a log   file. In the shell, pipx will tell you the location of the log file and attempt to summarize why pip failed. (#625)</li> <li>For <code>reinstall-all</code>, fixed bug where missing python executable would cause error. (#634)</li> <li>Fix regression which prevented pipx from working with pythonloc (and <code>__pypackages__</code> folder). (#636)</li> </ul>"},{"location":"changelog.html#01600","title":"0.16.0.0","text":"<ul> <li>New venv inspection! The code that pipx uses to examine and determine metadata in an installed venv has been made   faster, better, and more reliable. It now uses modern python libraries like <code>packaging</code> and <code>importlib.metadata</code> to   examine installed venvs. It also now properly handles installed package extras. In addition, some problems pipx has   had with certain characters (like periods) in package names should be remedied.</li> <li>Added reinstall command for reinstalling a single venv.</li> <li>Changed <code>pipx run</code> on non-Windows systems to actually replace pipx process with the app process instead of running it   as a subprocess. (Now using python's <code>os.exec*</code>)</li> <li>[bugfix] Fixed bug with reinstall-all command when package have been installed using a specifier. Now the initial   specifier is used.</li> <li>[bugfix] Override display of <code>PIPX_DEFAULT_PYTHON</code> value when generating web documentation for <code>pipx install</code> #523</li> <li>[bugfix] Wrap help documentation for environment variables.</li> <li>[bugfix] Fixed uninstall crash that could happen on Windows for certain packages</li> <li>[feature] Venv package name arguments now do not have to match exactly as pipx has them stored, but can be specified   in any python-package-name-equivalent way. (i.e. case does not matter, and <code>.</code>, <code>-</code>, <code>_</code> characters are   interchangeable.)</li> <li>[change] Venvs with a suffix: A suffix can contain any characters, but for purposes of uniqueness, python package name   rules apply--upper- and lower-case letters are equivalent, and any number of <code>.</code>, <code>-</code>, or <code>_</code> characters in a row are   equivalent. (e.g. if you have a suffixed venv <code>pylint_1.0A</code> you could not add another suffixed venv called   <code>pylint--1-0a</code>, as it would not be a unique name.)</li> <li>[implementation detail] Pipx shared libraries (providing pip, setuptools, wheel to pipx) are no longer installed using   pip arguments taken from the last regular pipx install. If you need to apply pip arguments to pipx's use of pip for   its internal shared libraries, use PIP_* environment variables.</li> <li>[feature] Autocomplete for venv names is no longer restricted to an exact match to the literal venv name, but will   autocomplete any logically-similar python package name (i.e. case does not matter, and <code>.</code>, <code>-</code>, <code>_</code> characters are   all equivalent.)</li> <li>pipx now reinstall its internal shared libraries when the user executes <code>reinstall-all</code>.</li> <li>Made sure shell exit codes from every pipx command are correct. In the past some (like from <code>pipx upgrade</code>) were   wrong. The exit code from <code>pipx runpip</code> is now the exit code from the <code>pip</code> command run. The exit code from   <code>pipx list</code> will be 1 if one or more venvs have problems that need to be addressed.</li> <li>pipx now writes a log file for each pipx command executed to <code>$PIPX_HOME/logs</code>, typically <code>~/.local/pipx/logs</code>. pipx   keeps the most recent 10 logs and deletes others.</li> <li><code>pipx upgrade</code> and <code>pipx upgrade-all</code> now have a <code>--upgrade-injected</code> option which directs pipx to also upgrade   injected packages.</li> <li><code>pipx list</code> now detects, identifies, and suggests a remedy for venvs with old-internal data (internal venv names) that   need to be updated.</li> <li>Added a \"Troubleshooting\" page to the pipx web documentation for common problems pipx users may encounter.</li> <li>pipx error, warning, and other messages now word-wrap so words are not split across lines. Their appearance is also   now more consistent.</li> </ul>"},{"location":"changelog.html#01560","title":"0.15.6.0","text":"<ul> <li>[docs] Update license</li> <li>[docs] Display a more idiomatic command for registering completions on fish.</li> <li>[bugfix] Fixed regression in list, inject, upgrade, reinstall-all commands when suffixed packages are used.</li> <li>[bugfix] Do not reset package url during upgrade when main package is <code>pipx</code></li> <li>Updated help text to show description for <code>ensurepath</code> and <code>completions</code> help</li> <li>Added support for user-defined default python interpreter via new <code>PIPX_DEFAULT_PYTHON</code>. Helpful for use with pyenv   among other uses.</li> <li>[bugfix] Fixed bug where extras were ignored with a PEP 508 package specification with a URL.</li> </ul>"},{"location":"changelog.html#01551","title":"0.15.5.1","text":"<ul> <li>[bugfix] Fixed regression of 0.15.5.0 which erroneously made installing from a local path with package extras not   possible.</li> </ul>"},{"location":"changelog.html#01550","title":"0.15.5.0","text":"<ul> <li>pipx now parses package specification before install. It removes (with warning) the <code>--editable</code> install option for   any package specification that is not a local path. It also removes (with warning) any environment markers.</li> <li>Disabled animation when we cannot determine terminal size or if the number of columns is too small. (Fixes #444)</li> <li>[feature] Version of each injected package is now listed after name for <code>pipx list --include-injected</code></li> <li>Change metadata recorded from version-specified install to allow upgrades in future. Adds pipx dependency on   <code>packaging</code> package.</li> <li>[bugfix] Prevent python error in case where package has no pipx metadata and advise user how to fix.</li> <li>[feature] <code>ensurepath</code> now also ensures that pip user binary path containing pipx itself is in user's PATH if pipx was   installed using <code>pip install --user</code>.</li> <li>[bugfix] For <code>pipx install</code>, fixed failure to install if user has <code>PIP_USER=1</code> or <code>user=true</code> in pip.conf. (#110)</li> <li>[bugfix] Requiring userpath v1.4.1 or later so ensure Windows bug is fixed for <code>ensurepath</code> (#437)</li> <li>[feature] log pipx version (#423)</li> <li>[feature] <code>--suffix</code> option for <code>install</code> to allow multiple versions of same tool to be installed (#445)</li> <li>[feature] pipx can now be used with the Windows embeddable Python distribution</li> </ul>"},{"location":"changelog.html#01540","title":"0.15.4.0","text":"<ul> <li>[feature] <code>list</code> now has a new option <code>--include-injected</code> to show the injected packages in the main apps</li> <li>[bugfix] Fixed bug that can cause crash when installing an app</li> </ul>"},{"location":"changelog.html#01531","title":"0.15.3.1","text":"<ul> <li>[bugfix] Workaround multiprocessing issues on certain platforms (#229)</li> </ul>"},{"location":"changelog.html#01530","title":"0.15.3.0","text":"<ul> <li>[feature] Use symlinks on Windows when symlinks are available</li> </ul>"},{"location":"changelog.html#01520","title":"0.15.2.0","text":"<ul> <li>[bugfix] Improved error reporting during venv metadata inspection.</li> <li>[bugfix] Fixed incompatibility with pypy as venv interpreter (#372).</li> <li>[bugfix] Replaced implicit dependency on setuptools with an explicit dependency on packaging (#339).</li> <li>[bugfix] Continue reinstalling packages after failure</li> <li>[bugfix] Hide cursor while pipx runs</li> <li>[feature] Add environment variable <code>USE_EMOJI</code> to allow enabling/disabling emojis (#376)</li> <li>[refactor] Moved all commands to separate files within the commands module (#255).</li> <li>[bugfix] Ignore system shared libraries when installing shared libraries pip, wheel, and setuptools. This also fixes   an incompatibility with Debian/Ubuntu's version of pip (#386).</li> </ul>"},{"location":"changelog.html#01513","title":"0.15.1.3","text":"<ul> <li>[bugfix] On Windows, pipx now lists correct Windows apps (#217)</li> <li>[bugfix] Fixed a <code>pipx install</code> bug causing incorrect python binary to be used when using the optional --python   argument in certain situations, such as running pipx from a Framework python on macOS and specifying a non-Framework   python.</li> </ul>"},{"location":"changelog.html#01512","title":"0.15.1.2","text":"<ul> <li>[bugfix] Fix recursive search of dependencies' apps so no apps are missed.</li> <li><code>upgrade-all</code> now skips editable packages, because pip disallows upgrading editable packages.</li> </ul>"},{"location":"changelog.html#01511","title":"0.15.1.1","text":"<ul> <li>[bugfix] fix regression that caused installing with --editable flag to fail package name determination.</li> </ul>"},{"location":"changelog.html#01510","title":"0.15.1.0","text":"<ul> <li>Add Python 3.8 to PyPI classifier and travis test matrix</li> <li>[feature] auto-upgrade shared libraries, including pip, if older than one month. Hide all pip warnings that a new   version is available. (#264)</li> <li>[bugfix] pass pip arguments to pip when determining package name (#320)</li> </ul>"},{"location":"changelog.html#01500","title":"0.15.0.0","text":"<p>Upgrade instructions: When upgrading to 0.15.0.0 or above from a pre-0.15.0.0 version, you must re-install all packages to take advantage of the new persistent pipx metadata files introduced in this release. These metadata files store pip specification values, injected packages, any custom pip arguments, and more in each main package's venv. You can do this by running <code>pipx reinstall-all</code> or <code>pipx uninstall-all</code>, then reinstalling manually.</p> <ul> <li><code>install</code> now has no <code>--spec</code> option. You may specify any valid pip specification for <code>install</code>'s main argument.</li> <li><code>inject</code> will now accept pip specifications for dependency arguments</li> <li>Metadata is now stored for each application installed, including install options like <code>--spec</code>, and injected packages.   This information allows upgrade, upgrade-all and reinstall-all to work properly even with non-pypi installed packages.   (#222)</li> <li><code>upgrade</code> options <code>--spec</code> and <code>--include-deps</code> were removed. Pipx now uses the original options used to install each   application instead. (#222)</li> <li><code>upgrade-all</code> options <code>--include-deps</code>, <code>--system-site-packages</code>, <code>--index-url</code>, <code>--editable</code>, and <code>--pip-args</code> were   removed. Pipx now uses the original options used to install each application instead. (#222)</li> <li><code>reinstall-all</code> options <code>--include-deps</code>, <code>--system-site-packages</code>, <code>--index-url</code>, <code>--editable</code>, and <code>--pip-args</code> were   removed. Pipx now uses the original options used to install each application instead. (#222)</li> <li>Handle missing interpreters more gracefully (#146)</li> <li>Change <code>reinstall-all</code> to use system python by default for apps. Now use <code>--python</code> option to specify a different   python version.</li> <li>Remove the PYTHONPATH environment variable when executing any command to prevent conflicts between pipx dependencies   and package dependencies when pipx is installed via homebrew. Homebrew can use PYTHONPATH manipulation instead of   virtual environments. (#233)</li> <li>Add printed summary after successful call to <code>pipx inject</code></li> <li>Support associating apps with Python 3.5</li> <li>Improvements to animation status text</li> <li>Make <code>--python</code> argument in <code>reinstall-all</code> command optional</li> <li>Use threads on OS's without support for semaphores</li> <li>Stricter parsing when passing <code>--</code> argument as delimiter</li> </ul>"},{"location":"changelog.html#01400","title":"0.14.0.0","text":"<ul> <li>Speed up operations by using shared venv for <code>pip</code>, <code>setuptools</code>, and <code>wheel</code>. You can see more detail in the 'how   pipx works' section of the documentation. (#164, @pfmoore)</li> <li>Breaking change: for the <code>inject</code> command, change <code>--include-binaries</code> to <code>--include-apps</code></li> <li>Change all terminology from <code>binary</code> to <code>app</code> or <code>application</code></li> <li>Improve argument parsing for <code>pipx run</code> and <code>pipx runpip</code></li> <li>If <code>--force</code> is passed, remove existing files in PIPX_BIN_DIR</li> <li>Move animation to start of line, hide cursor when animating</li> </ul>"},{"location":"changelog.html#01323","title":"0.13.2.3","text":"<ul> <li>Fix regression when installing a package that doesn't have any entry points</li> </ul>"},{"location":"changelog.html#01322","title":"0.13.2.2","text":"<ul> <li>Remove unnecessary and sometimes incorrect check after <code>pipx inject</code> (#195)</li> <li>Make status text/animation reliably disappear before continuing</li> <li>Update animation symbols</li> </ul>"},{"location":"changelog.html#01321","title":"0.13.2.1","text":"<ul> <li>Remove virtual environment if installation did not complete. For example, if it was interrupted by ctrl+c or if an   exception occurred for any reason. (#193)</li> </ul>"},{"location":"changelog.html#01320","title":"0.13.2.0","text":"<ul> <li>Add shell autocompletion. Also add <code>pipx completions</code> command to print instructions on how to add pipx completions to   your shell.</li> <li>Un-deprecate <code>ensurepath</code>. Use <code>userpath</code> internally instead of instructing users to run the <code>userpath</code> cli command.</li> <li>Improve detection of PIPX_BIN_DIR not being on PATH</li> <li>Improve error message when an existing symlink exists in PIPX_BIN_DIR and points to the wrong location</li> <li>Improve handling of unexpected files in PIPX_HOME (@uranusjr)</li> <li>swap out of order logic in order to correctly recommend --include-deps (@joshuarli)</li> <li>[dev] Migrate from tox to nox</li> </ul>"},{"location":"changelog.html#01311","title":"0.13.1.1","text":"<ul> <li>Do not raise bare exception if no binaries found (#150)</li> <li>Update pipsi migration script</li> </ul>"},{"location":"changelog.html#01310","title":"0.13.1.0","text":"<ul> <li>Deprecate <code>ensurepath</code> command. Use <code>userpath append ~/.local/bin</code></li> <li>Support redirects and proxies when downloading python files (i.e. <code>pipx run http://url/file.py</code>)</li> <li>Use tox for document generation and CI testing (CI tests are now functional rather than static tests on style and   formatting!)</li> <li>Use mkdocs for documentation</li> <li>Change default cache duration for <code>pipx run</code> from 2 to 14 days</li> </ul>"},{"location":"changelog.html#01301","title":"0.13.0.1","text":"<ul> <li>Fix upgrade-all and reinstall-all regression</li> </ul>"},{"location":"changelog.html#01300","title":"0.13.0.0","text":"<ul> <li>Add <code>runpip</code> command to run arbitrary pip commands in pipx-managed virtual environments</li> <li>Do not raise error when running <code>pipx install PACKAGE</code> and the package has already been installed by pipx (#125). This   is the cause of the major version change from 0.12 to 0.13.</li> <li>Add <code>--skip</code> argument to <code>upgrade-all</code> and <code>reinstall-all</code> commands, to let the user skip particular packages</li> </ul>"},{"location":"changelog.html#01233","title":"0.12.3.3","text":"<ul> <li>Update logic in determining a package's binaries during installation. This removes spurious binaries from the   installation. (#104)</li> <li>Improve compatibility with Debian distributions by using <code>shutil.which</code> instead of <code>distutils.spawn.find_executable</code>   (#102)</li> </ul>"},{"location":"changelog.html#01232","title":"0.12.3.2","text":"<ul> <li>Fix infinite recursion error when installing package such as <code>cloudtoken==0.1.84</code> (#103)</li> <li>Fix windows type errors (#96, #98)</li> </ul>"},{"location":"changelog.html#01231","title":"0.12.3.1","text":"<ul> <li>Fix \"WindowsPath is not iterable\" bug</li> </ul>"},{"location":"changelog.html#01230","title":"0.12.3.0","text":"<ul> <li>Add <code>--include-deps</code> argument to include binaries of dependent packages when installing with pipx. This improves   compatibility with packages that depend on other installed packages, such as <code>jupyter</code>.</li> <li>Speed up <code>pipx list</code> output (by running multiple processes in parallel) and by collecting all metadata in a single   subprocess call</li> <li>More aggressive cache directory removal when <code>--no-cache</code> is passed to <code>pipx run</code></li> <li>[dev] Move inline text passed to subprocess calls to their own files to enable autoformatting, linting, unit testing</li> </ul>"},{"location":"changelog.html#01220","title":"0.12.2.0","text":"<ul> <li>Add support for PEP 582's <code>__pypackages__</code> (experimental). <code>pipx run BINARY</code> will first search in <code>__pypackages__</code> for   binary, then fallback to installing from PyPI. <code>pipx run --pypackages BINARY</code> will raise an error if the binary is not   found in <code>__pypackages__</code>.</li> <li>Fix regression when installing with <code>--editable</code> flag (#93)</li> <li>[dev] improve unit tests</li> </ul>"},{"location":"changelog.html#01210","title":"0.12.1.0","text":"<ul> <li>Cache and reuse temporary Virtual Environments created with <code>pipx run</code> (#61)</li> <li>Update binary discovery logic to find \"scripts\" like awscli (#91)</li> <li>Forward <code>--pip-args</code> to the pip upgrade command (previously the args were forwarded to install/upgrade commands for   packages) (#77)</li> <li>When using environment variable PIPX_HOME, Virtual Environments will now be created at <code>$PIPX_HOME/venvs</code> rather than   at <code>$PIPX_HOME</code>.</li> <li>[dev] refactor into multiple files, add more unit tests</li> </ul>"},{"location":"changelog.html#01204","title":"0.12.0.4","text":"<ul> <li>Fix parsing bug in pipx run</li> </ul>"},{"location":"changelog.html#01203","title":"0.12.0.3","text":"<ul> <li>list python2 as supported language so that pip installs with python2 will no longer install the pipx on PyPI from the   original pipx owner. Running pipx with python2 will fail, but at least it will not be as confusing as running the pipx   package from the original owner.</li> </ul>"},{"location":"changelog.html#01202","title":"0.12.0.2","text":"<ul> <li>forward arguments to run command correctly #90</li> </ul>"},{"location":"changelog.html#01201","title":"0.12.0.1","text":"<ul> <li>stop using unverified context #89</li> </ul>"},{"location":"changelog.html#01200","title":"0.12.0.0","text":"<ul> <li>Change installation instructions to use <code>pipx</code> PyPI name</li> <li>Add <code>ensurepath</code> command</li> </ul>"},{"location":"changelog.html#01102","title":"0.11.0.2","text":"<ul> <li>add version argument parsing back in (fixes regression)</li> </ul>"},{"location":"changelog.html#01101","title":"0.11.0.1","text":"<ul> <li>add version check, command check, fix printed version update installation instructions</li> </ul>"},{"location":"changelog.html#01100","title":"0.11.0.0","text":"<ul> <li>Replace <code>pipx BINARY</code> with <code>pipx run BINARY</code> to run a binary in an ephemeral environment. This is a breaking API   change so the major version has been incremented. (Issue #69)</li> <li>upgrade pip when upgrading packages (Issue #72)</li> <li>support --system-site-packages flag (Issue #64)</li> </ul>"},{"location":"changelog.html#01041","title":"0.10.4.1","text":"<ul> <li>Fix version printed when <code>pipx --version</code> is run</li> </ul>"},{"location":"changelog.html#01040","title":"0.10.4.0","text":"<ul> <li>Add --index-url, --editable, and --pip-args flags</li> <li>Updated README with pipsi migration instructions</li> </ul>"},{"location":"changelog.html#01030","title":"0.10.3.0","text":"<ul> <li>Display python version in list</li> <li>Do not reinstall package if already installed (added <code>--force</code> flag to override)</li> <li>When upgrading all packages, print message only when package is updated</li> <li>Avoid accidental execution of pipx.main</li> </ul>"},{"location":"comparisons.html","title":"Comparison to Other Tools","text":""},{"location":"comparisons.html#pipx-vs-pip","title":"pipx vs pip","text":"<ul> <li>pip is a general Python package installer. It can be used to install libraries or cli applications with entrypoints.</li> <li>pipx is a specialized package installer. It can only be used to install packages with cli entrypoints.</li> <li>pipx and pip both install packages from PyPI (or locally)</li> <li>pipx relies on pip (and venv)</li> <li>pipx replaces a subset of pip's functionality; it lets you install cli applications but NOT libraries that you import   in your code.</li> <li>you can install pipx with pip</li> </ul> <p>Example interaction: Install pipx with pip: <code>pip install --user pipx</code></p>"},{"location":"comparisons.html#pipx-vs-poetry-and-pipenv","title":"pipx vs poetry and pipenv","text":"<ul> <li>pipx is used solely for application consumption: you install cli apps with it</li> <li>pipenv and poetry are cli apps used to develop applications and libraries</li> <li>all three tools wrap pip and virtual environments for more convenient workflows</li> </ul> <p>Example interaction: Install pipenv and poetry with pipx: <code>pipx install poetry</code> Run pipenv or poetry with pipx: <code>pipx run poetry --help</code></p>"},{"location":"comparisons.html#pipx-vs-venv","title":"pipx vs venv","text":"<ul> <li>venv is part of Python's standard library in Python 3.2 and above</li> <li>venv creates \"virtual environments\" which are sandboxed python installations</li> <li>pipx heavily relies on the venv package</li> </ul> <p>Example interaction: pipx installs packages to environments created with venv. <code>pipx install black --verbose</code></p>"},{"location":"comparisons.html#pipx-vs-pyenv","title":"pipx vs pyenv","text":"<ul> <li>pyenv manages python versions on your system. It helps you install versions like Python 3.6, 3.7, etc.</li> <li>pipx installs packages in virtual environments and exposes their entrypoints on your PATH</li> </ul> <p>Example interaction: Install a Python interpreter with pyenv, then install a package using pipx and that new interpreter: <code>pipx install black --python=python3.11</code> where python3.11 was installed on the system with pyenv</p>"},{"location":"comparisons.html#pipx-vs-pipsi","title":"pipx vs pipsi","text":"<ul> <li>pipx and pipsi both install packages in a similar way</li> <li>pipx is under active development. pipsi is no longer maintained.</li> <li>pipx always makes sure you're using the latest version of pip</li> <li>pipx has the ability to run an app in one line, leaving your system unchanged after it finishes (<code>pipx run APP</code>) where   pipsi does not</li> <li>pipx has the ability to recursively install binaries from dependent packages</li> <li>pipx adds more useful information to its output</li> <li>pipx has more CLI options such as upgrade-all, reinstall-all, uninstall-all</li> <li>pipx is more modern. It uses Python 3.6+, and the <code>venv</code> package in the Python3 standard library instead of the python   2 package <code>virtualenv</code>.</li> <li>pipx works with Python homebrew installations while pipsi does not (at least on my machine)</li> <li>pipx defaults to less verbose output</li> <li>pipx allows you to see each command it runs by passing the --verbose flag</li> <li>pipx prints emojis \ud83d\ude00</li> </ul> <p>Example interaction: None. Either one or the other should be used. These tools compete for a similar workflow.</p>"},{"location":"comparisons.html#migrating-to-pipx-from-pipsi","title":"Migrating to pipx from pipsi","text":"<p>After you have installed pipx, run migrate_pipsi_to_pipx.py. Why not do this with your new pipx installation?</p> <pre><code>pipx run https://raw.githubusercontent.com/pypa/pipx/main/scripts/migrate_pipsi_to_pipx.py\n</code></pre>"},{"location":"comparisons.html#pipx-vs-brew","title":"pipx vs brew","text":"<ul> <li>Both brew and pipx install cli tools</li> <li>They install them from different sources. brew uses a curated repository specifically for brew, and pipx generally   uses PyPI.</li> </ul> <p>Example interaction: brew can be used to install pipx, but they generally don't interact much.</p>"},{"location":"comparisons.html#pipx-vs-npx","title":"pipx vs npx","text":"<ul> <li>Both can run cli tools (npx will search for them in node_modules, and if not found run in a temporary environment.   <code>pipx run</code> will search in <code>__pypackages__</code> and if not found run in a temporary environment)</li> <li>npx works with JavaScript and pipx works with Python</li> <li>Both tools attempt to make running executables written in a dynamic language (JS/Python) as easy as possible</li> <li>pipx can also install tools globally; npx cannot</li> </ul> <p>Example interaction: None. These tools work for different languages.</p>"},{"location":"comparisons.html#pipx-vs-pip-run","title":"pipx vs pip-run","text":"<p>pip-run is focused on running arbitrary Python code in ephemeral environments while pipx is focused on running Python binaries in ephemeral and non-ephemeral environments.</p> <p>For example these two commands both install poetry to an ephemeral environment and invoke poetry with <code>--help</code>.</p> <pre><code>pipx run poetry --help\npip-run poetry -- -m poetry --help\n</code></pre> <p>Example interaction: None.</p>"},{"location":"comparisons.html#pipx-vs-fades","title":"pipx vs fades","text":"<p>fades is a tool to run individual Python scripts inside automatically provisioned virtualenvs with their dependencies installed.</p> <ul> <li>Both fades and   pipx run allow specifying a script's dependencies in specially formatted comments,   but the exact syntax differs. (pipx's syntax is standardized by a   provisional specification,   fades's syntax is not standardized.)</li> <li>Both tools automatically set up reusable virtualenvs containing the necessary dependencies.</li> <li>Both can download Python scripts/packages to execute from remote resources.</li> <li>fades can only run individual script files while pipx can also run packages.</li> </ul> <p>Example interaction: None.</p>"},{"location":"comparisons.html#pipx-vs-paepactivate","title":"pipx vs pae/pactivate","text":"<p>pae is a Bash command-line function distributed with pactivate that uses pactivate to create non-ephemeral environments focused on general use, rather than just running command-line applications.</p> <p>There is a very detailed comparison here, but to briefly summarize:</p> <p>Similarities:</p> <ul> <li>Both create isolated environments without having to specify (and remember) a directory in which to store them.</li> <li>Both allow you to use any Python interpreter available on your system (subject to version restrictions below).</li> </ul> <p>pae advantages:</p> <ul> <li>Supports all versions of Python from 2.7 upward. pipx requires \u22653.8.</li> <li>Fewer dependencies. (See the detailed comparison for more information.)</li> <li>Easier to have multiple versions of a single program and/or use different Python versions for a single program.</li> <li>Somewhat more convenient for running arbitrary command-line programs in virtual environments, installing multiple packages in a single environment, and activating virtual environments.</li> <li>Integrates well with source code repos using pactivate.</li> </ul> <p>pae disadvantages:</p> <ul> <li>Usable with Bash shell only.</li> <li>Slightly less quick and convenient for installing/running command-line programs from single Python packages.</li> <li>Can be slower than pipx at creating virtual environments.</li> </ul> <p>Example interaction: None. Either one or the other should be used. These tools compete for a similar workflow.</p>"},{"location":"contributing.html","title":"Contributing","text":"<p>Thanks for your interest in contributing to pipx!</p> <p>Everyone who interacts with the pipx project via codebase, issue tracker, chat rooms, or otherwise is expected to follow the PSF Code of Conduct.</p>"},{"location":"contributing.html#submitting-changes","title":"Submitting changes","text":"<ol> <li>Fork the GitHub repository.</li> <li>Make a branch off of <code>main</code> and commit your changes to it.</li> <li>Add a changelog entry.</li> <li>Submit a pull request to the <code>main</code> branch on GitHub, referencing an    open issue.</li> </ol>"},{"location":"contributing.html#changelog-entries","title":"Changelog entries","text":"<p>The <code>CHANGELOG.md</code> file is built by towncrier from news fragments in the <code>changelog.d/</code> directory. To add an entry, create a news fragment in that directory named <code>{number}.{type}.md</code>, where <code>{number}</code> is the issue number, and <code>{type}</code> is one of <code>feature</code>, <code>bugfix</code>, <code>doc</code>, <code>removal</code>, or <code>misc</code>.</p> <p>For example, if your issue number is 1234 and it's fixing a bug, then you would create <code>changelog.d/1234.bugfix.md</code>. PRs can span multiple categories by creating multiple files: if you added a feature and deprecated/removed an old feature for issue #5678, you would create <code>changelog.d/5678.feature.md</code> and <code>changelog.d/5678.removal.md</code>.</p> <p>A changelog entry is meant for end users and should only contain details relevant to them. In order to maintain a consistent style, please keep the entry to the point, in sentence case, shorter than 80 characters, and in an imperative tone. An entry should complete the sentence \"This change will ...\". If one line is not enough, use a summary line in an imperative tone, followed by a description of the change in one or more paragraphs, each wrapped at 80 characters and separated by blank lines.</p> <p>You don't need to reference the pull request or issue number in a changelog entry, since towncrier will add a link using the number in the file name. Similarly, you don't need to add your name to the entry, since that will be associated with the pull request.</p>"},{"location":"contributing.html#running-pipx-for-development","title":"Running pipx For Development","text":"<p>To develop <code>pipx</code>, either create a developer environment, or perform an editable install:</p> <pre><code>python -m pip install -e .\npython -m pipx --version\n</code></pre>"},{"location":"contributing.html#running-tests","title":"Running Tests","text":""},{"location":"contributing.html#setup","title":"Setup","text":"<p>pipx uses an automation tool called nox for development, continuous integration testing, and various tasks.</p> <p><code>nox</code> defines tasks or \"sessions\" in <code>noxfile.py</code> which can be run with <code>nox -s SESSION_NAME</code>. Session names can be listed with <code>nox -l</code>.</p> <p>Install nox for pipx development:</p> <pre><code>python -m pip install --user nox\n</code></pre> <p>Tests are defined as <code>nox</code> sessions. You can see all nox sessions with</p> <pre><code>nox -l\n</code></pre> <p>At the time of this writing, the output looks like this</p> <pre><code>- refresh_packages_cache-3.12 -&gt; Populate .pipx_tests/package_cache\n- refresh_packages_cache-3.11 -&gt; Populate .pipx_tests/package_cache\n- refresh_packages_cache-3.10 -&gt; Populate .pipx_tests/package_cache\n- refresh_packages_cache-3.9 -&gt; Populate .pipx_tests/package_cache\n- refresh_packages_cache-3.8 -&gt; Populate .pipx_tests/package_cache\n- tests_internet-3.12 -&gt; Tests using internet pypi only\n- tests_internet-3.11 -&gt; Tests using internet pypi only\n- tests_internet-3.10 -&gt; Tests using internet pypi only\n- tests_internet-3.9 -&gt; Tests using internet pypi only\n- tests_internet-3.8 -&gt; Tests using internet pypi only\n* tests-3.12 -&gt; Tests using local pypiserver only\n* tests-3.11 -&gt; Tests using local pypiserver only\n* tests-3.10 -&gt; Tests using local pypiserver only\n* tests-3.9 -&gt; Tests using local pypiserver only\n* tests-3.8 -&gt; Tests using local pypiserver only\n- test_all_packages-3.12\n- test_all_packages-3.11\n- test_all_packages-3.10\n- test_all_packages-3.9\n- test_all_packages-3.8\n- cover -&gt; Coverage analysis\n* lint\n- develop-3.12\n- develop-3.11\n- develop-3.10\n- develop-3.9\n- develop-3.8\n- build\n- publish\n* build_docs\n- watch_docs\n* build_man\n- create_test_package_list-3.12\n- create_test_package_list-3.11\n- create_test_package_list-3.10\n- create_test_package_list-3.9\n- create_test_package_list-3.8\n</code></pre>"},{"location":"contributing.html#creating-a-developer-environment","title":"Creating a developer environment","text":"<p>For developing the tool (and to attach to your IDE) we recommend creating a Python environment via <code>nox -s develop-3.12</code>, afterwards use the Python interpreter available under <code>.nox/develop-3.12/bin/python</code>.</p>"},{"location":"contributing.html#unit-tests","title":"Unit Tests","text":"<p>To run unit tests in Python3.12, you can run</p> <pre><code>nox -s tests-3.12\n</code></pre> <p>[!TIP]</p> <p>You can run a specific unit test by passing arguments to pytest, the test runner pipx uses:</p> <pre><code>nox -s tests-3.8 -- -k EXPRESSION\n</code></pre> <p><code>EXPRESSION</code> can be a test name, such as</p> <pre><code>nox -s tests-3.8 -- -k test_uninstall\n</code></pre> <p>Coverage errors can usually be ignored when only running a subset of tests.</p>"},{"location":"contributing.html#running-unit-tests-offline","title":"Running Unit Tests Offline","text":"<p>Running the unit tests requires a directory <code>.pipx_tests/package_cache</code> to be populated from a fixed list of package distribution files (wheels or source files). If you have network access, <code>nox -s tests</code> automatically makes sure this directory is populated (including downloading files if necessary) as a first step. Thus, if you are running the tests with network access, you can ignore the rest of this section.</p> <p>If, however, you wish to run tests offline without the need for network access, you can populate <code>.pipx_tests/package_cache</code> yourself manually beforehand when you do have network access.</p>"},{"location":"contributing.html#populating-the-cache-directory-using-nox","title":"Populating the cache directory using nox","text":"<p>To populate <code>.pipx_tests/package_cache</code> manually using nox, execute:</p> <pre><code>nox -s refresh_packages_cache\n</code></pre> <p>This will sequence through available python executable versions to populate the cache directory for each version of python on your platform.</p>"},{"location":"contributing.html#lint-tests","title":"Lint Tests","text":"<p>Linting is done via <code>pre-commit</code>, setting it up and running it can be done via <code>nox</code> by typing:</p> <pre><code>nox -s lint\n</code></pre>"},{"location":"contributing.html#installing-or-injecting-new-packages-in-tests","title":"Installing or injecting new packages in tests","text":"<p>If the tests are modified such that a new package / version combination is <code>pipx install</code>ed or <code>pipx inject</code>ed that wasn't used in other tests, then one must make sure it's added properly to the packages lists in <code>testdata/tests_packages</code>.</p> <p>To accomplish this:</p> <ul> <li>Edit <code>testdata/tests_packages/primary_packages.txt</code> to add the new package(s) that you wish to <code>pipx install</code> or   <code>pipx inject</code> in the tests.</li> </ul> <p>Then using Github workflows to generate all platforms in the Github CI:</p> <ul> <li>Manually activate the Github workflow: Create tests package lists for offline tests</li> <li>Download the artifact <code>lists</code> and put the files from it into <code>testdata/tests_packages/</code></li> </ul> <p>Or to locally generate these lists from <code>testdata/tests_packages/primary_packages.txt</code>, on the target platform execute:</p> <ul> <li><code>nox -s create_test_package_list</code></li> </ul> <p>Finally, check-in the new or modified list files in the directory <code>testdata/tests_packages</code></p>"},{"location":"contributing.html#testing-pipx-on-continuous-integration-builds","title":"Testing pipx on Continuous Integration builds","text":"<p>Upon opening pull requests GitHub Actions will automatically trigger.</p>"},{"location":"contributing.html#building-documentation","title":"Building Documentation","text":"<p><code>pipx</code> autogenerate API documentation, and also uses templates.</p> <p>When updating pipx docs, make sure you are modifying the <code>docs</code> directory.</p> <p>You can generate the documentation with</p> <pre><code>nox -s build_docs\n</code></pre> <p>This will capture CLI documentation for any pipx argument modifications, as well as generate templates to the docs directory.</p> <p>To preview changes, including live reloading, open another terminal and run</p> <pre><code>nox -s watch_docs\n</code></pre>"},{"location":"contributing.html#releasing-new-pipx-versions","title":"Releasing New <code>pipx</code> Versions","text":"<p>To release a new version, manually run the <code>bump-changelog</code> action under the \"Actions\" tab, passing it the version to be released. This will create a pull request updating the changelog for the upcoming version, with the <code>release-version</code> label. Merging this PR will automatically trigger the release workflows.</p> <p>Attaching this label to any pull request of which the title follows the format <code>&lt;Version&gt;: Description</code> and merging it will trigger the release workflows as well.</p> <p>The release workflow consists of publishing:</p> <ul> <li>the pipx version to PyPI,</li> <li>the documentation to ReadTheDocs,</li> <li>a GitHub release,</li> <li>the <code>zipapp</code> to the GitHub release created.</li> </ul> <p>No need for any other pre or post publish steps.</p>"},{"location":"docs.html","title":"Docs","text":"<pre><code>usage: /usr/bin/python3 -m pipx [-h] [--quiet] [--verbose] [--global]\n                                [--version]\n                                {install,install-all,uninject,inject,pin,unpin,upgrade,upgrade-all,upgrade-shared,uninstall,uninstall-all,reinstall,reinstall-all,list,interpreter,run,runpip,ensurepath,environment,completions}\n                                ...\n\nInstall and execute apps from Python packages.\n\nBinaries can either be installed globally into isolated Virtual Environments\nor run directly in a temporary Virtual Environment.\n\nVirtual Environment location is ~/.local/share/pipx/venvs.\nSymlinks to apps are placed in ~/.local/bin.\nSymlinks to manual pages are placed in ~/.local/share/man.\n\noptional environment variables:\n  PIPX_HOME             Overrides default pipx location. Virtual Environments\n                        will be installed to $PIPX_HOME/venvs.\n  PIPX_BIN_DIR          Overrides location of app installations. Apps are\n                        symlinked or copied here.\n  PIPX_MAN_DIR          Overrides location of manual pages installations.\n                        Manual pages are symlinked or copied here.\n  PIPX_DEFAULT_PYTHON   Overrides default python used for commands.\n  USE_EMOJI             Overrides emoji behavior. Default value varies based\n                        on platform.\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --version             Print version and exit\n\nsubcommands:\n  Get help for commands with pipx COMMAND --help\n\n  {install,install-all,uninject,inject,pin,unpin,upgrade,upgrade-all,upgrade-shared,uninstall,uninstall-all,reinstall,reinstall-all,list,interpreter,run,runpip,ensurepath,environment,completions}\n    install             Install a package\n    install-all         Install all packages\n    uninject            Uninstall injected packages from an existing Virtual\n                        Environment\n    inject              Install packages into an existing Virtual Environment\n    upgrade             Upgrade a package\n    upgrade-all         Upgrade all packages. Runs `pip install -U &lt;pkgname&gt;`\n                        for each package.\n    upgrade-shared      Upgrade shared libraries.\n    uninstall           Uninstall a package\n    uninstall-all       Uninstall all packages\n    reinstall           Reinstall a package\n    reinstall-all       Reinstall all packages\n    list                List installed packages\n    interpreter         Interact with interpreters managed by pipx\n    run                 Download the latest version of a package to a\n                        temporary virtual environment, then run an app from\n                        it. Also compatible with local `__pypackages__`\n                        directory (experimental).\n    runpip              Run pip in an existing pipx-managed Virtual\n                        Environment\n    ensurepath          Ensure directories necessary for pipx operation are in\n                        your PATH environment variable.\n    environment         Print a list of environment variables and paths used\n                        by pipx.\n    completions         Print instructions on enabling shell completions for\n                        pipx\n</code></pre>"},{"location":"docs.html#pipx-install","title":"pipx install","text":"<pre><code>usage: /usr/bin/python3 -m pipx install [-h] [--quiet] [--verbose] [--global]\n                                        [--include-deps] [--force]\n                                        [--suffix SUFFIX] [--python PYTHON]\n                                        [--fetch-missing-python]\n                                        [--preinstall PREINSTALL]\n                                        [--system-site-packages]\n                                        [--index-url INDEX_URL] [--editable]\n                                        [--pip-args PIP_ARGS]\n                                        package_spec [package_spec ...]\n\nThe install command is the preferred way to globally install apps\nfrom python packages on your system. It creates an isolated virtual\nenvironment for the package, then ensures the package's apps are\naccessible on your $PATH. The package's manual pages installed in\nshare/man/man[1-9] can be viewed with man on an operating system where\nit is available and the path in the environment variable `PIPX_MAN_DIR`\n(default: ~/.local/share/man) is in the man search path\n($MANPATH).\n\nThe result: apps you can run from anywhere, located in packages\nyou can cleanly upgrade or uninstall. Guaranteed to not have\ndependency version conflicts or interfere with your OS's python\npackages. 'sudo' is not required to do this.\n\npipx install PACKAGE_SPEC ...\npipx install --python PYTHON PACKAGE_SPEC\npipx install VCS_URL\npipx install ./LOCAL_PATH\npipx install ZIP_FILE\npipx install TAR_GZ_FILE\n\nThe PACKAGE_SPEC argument is passed directly to `pip install`.\n\nThe default virtual environment location is ~/.local/share/pipx\nand can be overridden by setting the environment variable `PIPX_HOME`\n(Virtual Environments will be installed to `$PIPX_HOME/venvs`).\n\nThe default app location is ~/.local/bin and can be\noverridden by setting the environment variable `PIPX_BIN_DIR`.\n\nThe default manual pages location is ~/.local/share/man and\ncan be overridden by setting the environment variable `PIPX_MAN_DIR`.\n\nThe default python executable used to install a package is\n/usr/bin/python3.12 and can be overridden\nby setting the environment variable `PIPX_DEFAULT_PYTHON`.\n\npositional arguments:\n  package_spec          package name(s) or pip installation spec(s)\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --include-deps        Include apps of dependent packages\n  --force, -f           Modify existing virtual environment and files in\n                        PIPX_BIN_DIR and PIPX_MAN_DIR\n  --suffix SUFFIX       Optional suffix for virtual environment and executable\n                        names. NOTE: The suffix feature is experimental and\n                        subject to change.\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n  --preinstall PREINSTALL\n                        Optional package to be installed into the Virtual\n                        Environment before installing the main package. Use\n                        this flag multiple times if you want to preinstall\n                        multiple packages.\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --index-url INDEX_URL, -i INDEX_URL\n                        Base URL of Python Package Index\n  --editable, -e        Install a project in editable mode\n  --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip\n                        install/upgrade commands\n</code></pre>"},{"location":"docs.html#pipx-install-all","title":"pipx install-all","text":"<pre><code>usage: /usr/bin/python3 -m pipx install-all [-h] [--quiet] [--verbose]\n                                            [--global] [--force]\n                                            [--python PYTHON]\n                                            [--fetch-missing-python]\n                                            [--system-site-packages]\n                                            [--index-url INDEX_URL]\n                                            [--editable] [--pip-args PIP_ARGS]\n                                            spec_metadata_file\n\nInstalls all the packages according to spec metadata file.\n\npositional arguments:\n  spec_metadata_file    Spec metadata file generated from pipx list --json\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --force, -f           Modify existing virtual environment and files in\n                        PIPX_BIN_DIR and PIPX_MAN_DIR\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --index-url INDEX_URL, -i INDEX_URL\n                        Base URL of Python Package Index\n  --editable, -e        Install a project in editable mode\n  --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip\n                        install/upgrade commands\n</code></pre>"},{"location":"docs.html#pipx-uninject","title":"pipx uninject","text":"<pre><code>usage: /usr/bin/python3 -m pipx uninject [-h] [--quiet] [--verbose] [--global]\n                                         [--leave-deps]\n                                         package dependencies\n                                         [dependencies ...]\n\nUninstalls injected packages from an existing pipx-managed virtual\nenvironment.\n\npositional arguments:\n  package        Name of the existing pipx-managed Virtual Environment to\n                 inject into\n  dependencies   the package names to uninject from the Virtual Environment\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n  --leave-deps   Only uninstall the main injected package but leave its\n                 dependencies installed.\n</code></pre>"},{"location":"docs.html#pipx-inject","title":"pipx inject","text":"<pre><code>usage: /usr/bin/python3 -m pipx inject [-h] [--quiet] [--verbose] [--global]\n                                       [-r file] [--include-apps]\n                                       [--include-deps]\n                                       [--system-site-packages]\n                                       [--index-url INDEX_URL] [--editable]\n                                       [--pip-args PIP_ARGS] [--force]\n                                       [--with-suffix]\n                                       package [dependencies ...]\n\nInstalls packages to an existing pipx-managed virtual environment.\n\npositional arguments:\n  package               Name of the existing pipx-managed Virtual Environment\n                        to inject into\n  dependencies          the packages to inject into the Virtual Environment--\n                        either package name or pip package spec\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  -r file, --requirement file\n                        file containing the packages to inject into the\n                        Virtual Environment--one package name or pip package\n                        spec per line. May be specified multiple times.\n  --include-apps        Add apps from the injected packages onto your PATH and\n                        expose their manual pages\n  --include-deps        Include apps of dependent packages. Implies --include-\n                        apps\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --index-url INDEX_URL, -i INDEX_URL\n                        Base URL of Python Package Index\n  --editable, -e        Install a project in editable mode\n  --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip\n                        install/upgrade commands\n  --force, -f           Modify existing virtual environment and files in\n                        PIPX_BIN_DIR and PIPX_MAN_DIR\n  --with-suffix         Add the suffix (if given) of the Virtual Environment\n                        to the packages to inject\n</code></pre>"},{"location":"docs.html#pipx-upgrade","title":"pipx upgrade","text":"<pre><code>usage: /usr/bin/python3 -m pipx upgrade [-h] [--quiet] [--verbose] [--global]\n                                        [--include-injected] [--force]\n                                        [--system-site-packages]\n                                        [--index-url INDEX_URL] [--editable]\n                                        [--pip-args PIP_ARGS] [--install]\n                                        [--python PYTHON]\n                                        [--fetch-missing-python]\n                                        packages [packages ...]\n\nUpgrade package(s) in pipx-managed Virtual Environment(s) by running 'pip\ninstall --upgrade PACKAGE'\n\npositional arguments:\n  packages              package names(s) to upgrade\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --include-injected    Also upgrade packages injected into the main app's\n                        environment\n  --force, -f           Modify existing virtual environment and files in\n                        PIPX_BIN_DIR and PIPX_MAN_DIR\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --index-url INDEX_URL, -i INDEX_URL\n                        Base URL of Python Package Index\n  --editable, -e        Install a project in editable mode\n  --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip\n                        install/upgrade commands\n  --install             Install package spec if missing\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n</code></pre>"},{"location":"docs.html#pipx-upgrade-all","title":"pipx upgrade-all","text":"<pre><code>usage: /usr/bin/python3 -m pipx upgrade-all [-h] [--quiet] [--verbose]\n                                            [--global] [--include-injected]\n                                            [--skip SKIP [SKIP ...]] [--force]\n\nUpgrades all packages within their virtual environments by running 'pip\ninstall --upgrade PACKAGE'\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --include-injected    Also upgrade packages injected into the main app's\n                        environment\n  --skip SKIP [SKIP ...]\n                        skip these packages\n  --force, -f           Modify existing virtual environment and files in\n                        PIPX_BIN_DIR and PIPX_MAN_DIR\n</code></pre>"},{"location":"docs.html#pipx-upgrade-shared","title":"pipx upgrade-shared","text":"<pre><code>usage: /usr/bin/python3 -m pipx upgrade-shared [-h] [--quiet] [--verbose]\n                                               [--global]\n                                               [--pip-args PIP_ARGS]\n\nUpgrade shared libraries.\n\noptions:\n  -h, --help           show this help message and exit\n  --quiet, -q          Give less output. May be used multiple times\n                       corresponding to the ERROR and CRITICAL logging levels.\n                       The count maxes out at 2.\n  --verbose, -v        Give more output. May be used multiple times\n                       corresponding to the INFO, DEBUG and NOTSET logging\n                       levels. The count maxes out at 3.\n  --global             Perform action globally for all users.\n  --pip-args PIP_ARGS  Arbitrary pip arguments to pass directly to pip\n                       install/upgrade commands\n</code></pre>"},{"location":"docs.html#pipx-uninstall","title":"pipx uninstall","text":"<pre><code>usage: /usr/bin/python3 -m pipx uninstall [-h] [--quiet] [--verbose]\n                                          [--global]\n                                          package\n\nUninstalls a pipx-managed Virtual Environment by deleting it and any files\nthat point to its apps.\n\npositional arguments:\n  package\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n</code></pre>"},{"location":"docs.html#pipx-uninstall-all","title":"pipx uninstall-all","text":"<pre><code>usage: /usr/bin/python3 -m pipx uninstall-all [-h] [--quiet] [--verbose]\n                                              [--global]\n\nUninstall all pipx-managed packages\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n</code></pre>"},{"location":"docs.html#pipx-reinstall","title":"pipx reinstall","text":"<pre><code>usage: /usr/bin/python3 -m pipx reinstall [-h] [--quiet] [--verbose]\n                                          [--global] [--python PYTHON]\n                                          [--fetch-missing-python]\n                                          package\n\nReinstalls a package.\n\nPackage is uninstalled, then installed with pipx install PACKAGE\nwith the same options used in the original install of PACKAGE.\n\npositional arguments:\n  package\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n</code></pre>"},{"location":"docs.html#pipx-reinstall-all","title":"pipx reinstall-all","text":"<pre><code>usage: /usr/bin/python3 -m pipx reinstall-all [-h] [--quiet] [--verbose]\n                                              [--global] [--python PYTHON]\n                                              [--fetch-missing-python]\n                                              [--skip SKIP [SKIP ...]]\n\nReinstalls all packages.\n\nPackages are uninstalled, then installed with pipx install PACKAGE\nwith the same options used in the original install of PACKAGE.\nThis is useful if you upgraded to a new version of Python and want\nall your packages to use the latest as well.\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n  --skip SKIP [SKIP ...]\n                        skip these packages\n</code></pre>"},{"location":"docs.html#pipx-list","title":"pipx list","text":"<pre><code>usage: /usr/bin/python3 -m pipx list [-h] [--quiet] [--verbose] [--global]\n                                     [--include-injected]\n                                     [--json | --short | --pinned | --skip-maintenance]\n\nList packages and apps installed with pipx\n\noptions:\n  -h, --help          show this help message and exit\n  --quiet, -q         Give less output. May be used multiple times\n                      corresponding to the ERROR and CRITICAL logging levels.\n                      The count maxes out at 2.\n  --verbose, -v       Give more output. May be used multiple times\n                      corresponding to the INFO, DEBUG and NOTSET logging\n                      levels. The count maxes out at 3.\n  --global            Perform action globally for all users.\n  --include-injected  Show packages injected into the main app's environment\n  --json              Output rich data in json format.\n  --short             List packages only.\n  --pinned            List pinned packages only. Pass --include-injected at\n                      the same time to list injected packages that were\n                      pinned.\n  --skip-maintenance  (deprecated) No-op\n</code></pre>"},{"location":"docs.html#pipx-interpreter","title":"pipx interpreter","text":"<pre><code>usage: /usr/bin/python3 -m pipx interpreter [-h] [--quiet] [--verbose]\n                                            [--global]\n                                            {list,prune,upgrade} ...\n\nInteract with interpreters managed by pipx\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n\nsubcommands:\n  Get help for commands with pipx interpreter COMMAND --help\n\n  {list,prune,upgrade}\n    list                List available interpreters\n    prune               Prune unused interpreters\n    upgrade             Upgrade installed interpreters to the latest available\n                        micro/patch version\n</code></pre>"},{"location":"docs.html#pipx-run","title":"pipx run","text":"<pre><code>usage: /usr/bin/python3 -m pipx run [-h] [--quiet] [--verbose] [--global]\n                                    [--no-cache] [--path] [--pypackages]\n                                    [--spec SPEC] [--python PYTHON]\n                                    [--fetch-missing-python]\n                                    [--system-site-packages]\n                                    [--index-url INDEX_URL] [--editable]\n                                    [--pip-args PIP_ARGS]\n                                    app ...\n\nDownload the latest version of a package to a temporary virtual environment,\nthen run an app from it. The environment will be cached\nand re-used for up to 14 days. This\nmeans subsequent calls to 'run' for the same package will be faster\nsince they can reuse the cached Virtual Environment.\n\nIn support of PEP 582 'run' will use apps found in a local __pypackages__\ndirectory, if present. Please note that this behavior is experimental,\nand acts as a companion tool to pythonloc. It may be modified or\nremoved in the future. See https://github.com/cs01/pythonloc.\n\npositional arguments:\n  app ...               app/package name and any arguments to be passed to it\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --no-cache            Do not reuse cached virtual environment if it exists\n  --path                Interpret app name as a local path\n  --pypackages          Require app to be run from local __pypackages__\n                        directory\n  --spec SPEC           The package name or specific installation source\n                        passed to pip. Runs `pip install -U SPEC`. For example\n                        `--spec mypackage==2.0.0` or `--spec\n                        git+https://github.com/user/repo.git@branch`\n  --python PYTHON       Python to install with. Possible values can be the\n                        executable name (python3.11), the version of an\n                        available system Python or to pass to py launcher\n                        (3.11), or the full path to the executable. Requires\n                        Python 3.8 or above.\n  --fetch-missing-python\n                        Whether to fetch a standalone python build from GitHub\n                        if the specified python version is not found locally\n                        on the system.\n  --system-site-packages\n                        Give the virtual environment access to the system\n                        site-packages dir.\n  --index-url INDEX_URL, -i INDEX_URL\n                        Base URL of Python Package Index\n  --editable, -e        Install a project in editable mode\n  --pip-args PIP_ARGS   Arbitrary pip arguments to pass directly to pip\n                        install/upgrade commands\n</code></pre>"},{"location":"docs.html#pipx-runpip","title":"pipx runpip","text":"<pre><code>usage: /usr/bin/python3 -m pipx runpip [-h] [--quiet] [--verbose] [--global]\n                                       package ...\n\nRun pip in an existing pipx-managed Virtual Environment\n\npositional arguments:\n  package        Name of the existing pipx-managed Virtual Environment to run\n                 pip in\n  pipargs        Arguments to forward to pip command\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n</code></pre>"},{"location":"docs.html#pipx-ensurepath","title":"pipx ensurepath","text":"<pre><code>usage: /usr/bin/python3 -m pipx ensurepath [-h] [--quiet] [--verbose]\n                                           [--global] [--force]\n\nEnsure directory where pipx stores apps is in your PATH environment variable.\nAlso if pipx was installed via `pip install --user`, ensure pipx itself is in\nyour PATH. Note that running this may modify your shell's configuration\nfile(s) such as '~/.bashrc'.\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n  --force, -f    Add text to your shell's config file even if it looks like\n                 your PATH already contains paths to pipx and pipx-install\n                 apps.\n</code></pre>"},{"location":"docs.html#pipx-environment","title":"pipx environment","text":"<pre><code>usage: /usr/bin/python3 -m pipx environment [-h] [--quiet] [--verbose]\n                                            [--global] [--value VARIABLE]\n\nPrints the names and current values of environment variables used by pipx,\nfollowed by internal pipx variables which are derived from the environment\nvariables and platform specific default values.\n\nAvailable variables:\nPIPX_HOME, PIPX_BIN_DIR, PIPX_MAN_DIR, PIPX_SHARED_LIBS, PIPX_LOCAL_VENVS,\nPIPX_LOG_DIR, PIPX_TRASH_DIR, PIPX_VENV_CACHEDIR, PIPX_DEFAULT_PYTHON, USE_EMOJI\n\noptions:\n  -h, --help            show this help message and exit\n  --quiet, -q           Give less output. May be used multiple times\n                        corresponding to the ERROR and CRITICAL logging\n                        levels. The count maxes out at 2.\n  --verbose, -v         Give more output. May be used multiple times\n                        corresponding to the INFO, DEBUG and NOTSET logging\n                        levels. The count maxes out at 3.\n  --global              Perform action globally for all users.\n  --value VARIABLE, -V VARIABLE\n                        Print the value of the variable.\n</code></pre>"},{"location":"docs.html#pipx-completions","title":"pipx completions","text":"<pre><code>usage: /usr/bin/python3 -m pipx completions [-h] [--quiet] [--verbose]\n                                            [--global]\n\nPrint instructions on enabling shell completions for pipx\n\noptions:\n  -h, --help     show this help message and exit\n  --quiet, -q    Give less output. May be used multiple times corresponding to\n                 the ERROR and CRITICAL logging levels. The count maxes out at\n                 2.\n  --verbose, -v  Give more output. May be used multiple times corresponding to\n                 the INFO, DEBUG and NOTSET logging levels. The count maxes\n                 out at 3.\n  --global       Perform action globally for all users.\n</code></pre>"},{"location":"examples.html","title":"Examples","text":""},{"location":"examples.html#pipx-install-examples","title":"<code>pipx install</code> examples","text":"<pre><code>pipx install pycowsay\npipx install --python python3.10 pycowsay\npipx install --python 3.12 pycowsay\npipx install --fetch-missing-python --python 3.12 pycowsay\npipx install git+https://github.com/psf/black\npipx install git+https://github.com/psf/black.git@branch-name\npipx install git+https://github.com/psf/black.git@git-hash\npipx install git+ssh://&lt;username&gt;@&lt;private-repo-domain&gt;/&lt;path-to-package.git&gt;\npipx install https://github.com/psf/black/archive/18.9b0.zip\npipx install black[d]\npipx install --preinstall ansible-lint --preinstall mitogen ansible-core\npipx install 'black[d] @ git+https://github.com/psf/black.git@branch-name'\npipx install --suffix @branch-name 'black[d] @ git+https://github.com/psf/black.git@branch-name'\npipx install --include-deps jupyter\npipx install --pip-args='--pre' poetry\npipx install --pip-args='--index-url=&lt;private-repo-host&gt;:&lt;private-repo-port&gt; --trusted-host=&lt;private-repo-host&gt;:&lt;private-repo-port&gt;' private-repo-package\npipx install --index-url https://test.pypi.org/simple/ --pip-args='--extra-index-url https://pypi.org/simple/' some-package\npipx --global install pycowsay\npipx install .\npipx install path/to/some-project\n</code></pre>"},{"location":"examples.html#pipx-run-examples","title":"<code>pipx run</code> examples","text":"<p>pipx enables you to test various combinations of Python versions and package versions in ephemeral environments:</p> <pre><code>pipx run BINARY  # latest version of binary is run with python3\npipx run --spec PACKAGE==2.0.0 BINARY  # specific version of package is run\npipx run --python python3.10 BINARY  # Installed and invoked with specific Python version\npipx run --python python3.9 --spec PACKAGE=1.7.3 BINARY\npipx run --spec git+https://url.git BINARY  # latest version on default branch is run\npipx run --spec git+https://url.git@branch BINARY\npipx run --spec git+https://url.git@hash BINARY\npipx run pycowsay moo\npipx --version  # prints pipx version\npipx run pycowsay --version  # prints pycowsay version\npipx run --python pythonX pycowsay\npipx run pycowsay==2.0 --version\npipx run pycowsay[dev] --version\npipx run --spec git+https://github.com/psf/black.git black\npipx run --spec git+https://github.com/psf/black.git@branch-name black\npipx run --spec git+https://github.com/psf/black.git@git-hash black\npipx run --spec https://github.com/psf/black/archive/18.9b0.zip black --help\npipx run https://gist.githubusercontent.com/cs01/fa721a17a326e551ede048c5088f9e0f/raw/6bdfbb6e9c1132b1c38fdd2f195d4a24c540c324/pipx-demo.py\n</code></pre> <p>You can run local files, or scripts hosted on the internet, and you can run them with arguments:</p> <pre><code>pipx run test.py\npipx run test.py 1 2 3\npipx run https://example.com/test.py\npipx run https://example.com/test.py 1 2 3\n</code></pre> <p>A simple filename is ambiguous - it could be a file, or a package on PyPI. It will be treated as a filename if the file exists, or as a package if not. To force interpretation as a local path, use <code>--path</code>, and to force interpretation as a package name, use <code>--spec</code> (with the PyPI name of the package).</p> <pre><code>pipx run myscript.py # Local file, if myscript.py exists\npipx run doesnotexist.py # Package, because doesnotexist.py is not a local file\npipx run --path test.py # Always a local file\npipx run --spec test-py test.py # Always a package on PyPI\n</code></pre> <p>You can also run scripts that have dependencies:</p> <p>If you have a script <code>test.py</code> that needs 3rd party libraries, you can add inline script metadata in the style of PEP 723.</p> <pre><code># test.py\n\n# /// script\n# dependencies = [\"requests\"]\n# ///\n\nimport sys\nimport requests\nproject = sys.argv[1]\npipx_data = requests.get(f\"https://pypi.org/pypi/{project}/json\").json()\nprint(pipx_data[\"info\"][\"version\"])\n</code></pre> <p>Then you can run it as follows:</p> <pre><code>&gt; pipx run test.py pipx\n1.1.0\n</code></pre>"},{"location":"examples.html#pipx-inject-example","title":"<code>pipx inject</code> example","text":"<p>One use of the inject command is setting up a REPL with some useful extra packages.</p> <pre><code>&gt; pipx install ptpython\n&gt; pipx inject ptpython requests pendulum\n</code></pre> <p>After running the above commands, you will be able to import and use the <code>requests</code> and <code>pendulum</code> packages inside a <code>ptpython</code> repl.</p> <p>Equivalently, the extra packages can be listed in a text file (e.g. <code>useful-packages.txt</code>). Each line is a separate package specifier with the same syntax as the command line. Comments are supported with a <code>#</code> prefix. Hence, the syntax is a strict subset of the pip requirements file format syntax.</p> <pre><code># Additional packages\nrequests\n\npendulum # for easier datetimes\n</code></pre> <p>This file can then be given to <code>pipx inject</code> on the command line:</p> <pre><code>&gt; pipx inject ptpython --requirement useful-packages.txt\n# or:\n&gt; pipx inject ptpython -r useful-packages.txt\n</code></pre> <p>Note that these options can be repeated and used together, e.g.</p> <pre><code>&gt; pipx inject ptpython package-1 -r extra-packages-1.txt -r extra-packages-2.txt package-2\n</code></pre> <p>If you require full pip functionality, then use the <code>runpip</code> command instead; however, the installed packages won't be recognised as \"injected\".</p>"},{"location":"examples.html#pipx-list-example","title":"<code>pipx list</code> example","text":"<pre><code>&gt; pipx list\nvenvs are in /Users/user/.local/pipx/venvs\nbinaries are exposed on your $PATH at /Users/user/.local/bin\n   package black 18.9b0, Python 3.10.0\n    - black\n    - blackd\n   package pipx 0.10.0, Python 3.10.0\n    - pipx\n\n&gt; pipx list --short\nblack 18.9b0\npipx 0.10.0\n</code></pre>"},{"location":"examples.html#pipx-install-all-example","title":"<code>pipx install-all</code> example","text":"<pre><code>&gt; pipx list --json &gt; pipx.json\n&gt; pipx instal-all pipx.json\n'black' already seems to be installed. Not modifying existing installation in '/usr/local/pipx/venvs/black'. Pass '--force' to force installation.\n'pipx' already seems to be installed. Not modifying existing installation in '/usr/local/pipx/venvs/black'. Pass '--force' to force installation.\n&gt; pipx install-all pipx.json --force\nInstalling to existing venv 'black'\ninstalled package black 24.3.0, installed using Python 3.10.12\n  These apps are now globally available\n    - black\n    - blackd\ndone! \u2728 \ud83c\udf1f \u2728\nInstalling to existing venv 'pipx'\ninstalled package pipx 1.4.3, installed using Python 3.10.12\n  These apps are now globally available\n    - pipx\ndone! \u2728 \ud83c\udf1f \u2728\n</code></pre>"},{"location":"examples.html#pipx-upgrade-shared-examples","title":"<code>pipx upgrade-shared</code> examples","text":"<p>One use of the upgrade-shared command is to force a <code>pip</code> upgrade.</p> <pre><code>&gt; pipx upgrade-shared\n</code></pre> <p>This example pins <code>pip</code> (temporarily, until the next automatic upgrade, if that is not explicitly turned off) to a specific version.</p> <pre><code>&gt; pipx upgrade-shared --pip-args=pip==24.0\n</code></pre>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>Now that you have pipx installed, you can install a program:</p> <pre><code>pipx install PACKAGE\n</code></pre> <p>for example</p> <pre><code>pipx install pycowsay\n</code></pre> <p>You can list programs installed:</p> <pre><code>pipx list\n</code></pre> <p>Or you can run a program without installing it:</p> <pre><code>pipx run pycowsay moooo!\n</code></pre> <p>You can view documentation for all commands by running <code>pipx --help</code>.</p>"},{"location":"how-pipx-works.html","title":"How pipx works","text":""},{"location":"how-pipx-works.html#how-it-works","title":"How it Works","text":"<p>When installing a package and its binaries on linux (<code>pipx install package</code>) pipx will</p> <ul> <li>create directory <code>~/.local/share/pipx/venvs/PACKAGE</code></li> <li>create or reuse a shared virtual environment that contains shared packaging library <code>pip</code> in   <code>~/.local/share/pipx/shared/</code></li> <li>ensure the library is updated to its latest version</li> <li>create a Virtual Environment in <code>~/.local/share/pipx/venvs/PACKAGE</code> that uses the shared pip mentioned above but   otherwise is isolated (pipx uses a .pth file to do this)</li> <li>install the desired package in the Virtual Environment</li> <li>expose binaries at <code>~/.local/bin</code> that point to new binaries in <code>~/.local/share/pipx/venvs/PACKAGE/bin</code> (such as   <code>~/.local/bin/black</code> -&gt; <code>~/.local/share/pipx/venvs/black/bin/black</code>)</li> <li>expose manual pages at <code>~/.local/share/man/man[1-9]</code> that point to new manual pages in   <code>~/.local/pipx/venvs/PACKAGE/share/man/man[1-9]</code></li> <li>as long as <code>~/.local/bin/</code> is on your PATH, you can now invoke the new binaries globally</li> <li>on operating systems which have the <code>man</code> command, as long as <code>~/.local/share/man</code> is a recognized search path of man,   you can now view the new manual pages globally</li> <li>adding <code>--global</code> flag to any <code>pipx</code> command will execute the action in global scope which will expose app to all   users - reference. Note that this is not available on Windows.</li> </ul> <p>When running a binary (<code>pipx run BINARY</code>), pipx will</p> <ul> <li>create or reuse a shared virtual environment that contains the shared packaging library <code>pip</code></li> <li>ensure the library is updated to its latest version</li> <li>create a temporary directory (or reuse a cached virtual environment for this package) with a name based on a hash of   the attributes that make the run reproducible. This includes things like the package name, spec, python version, and   pip arguments.</li> <li>create a Virtual Environment inside it with <code>python -m venv</code></li> <li>install the desired package in the Virtual Environment</li> <li>invoke the binary</li> </ul> <p>These are all things you can do yourself, but pipx automates them for you. If you are curious as to what pipx is doing behind the scenes, you can always pass the <code>--verbose</code> flag to see every single command and argument being run.</p>"},{"location":"how-pipx-works.html#developing-for-pipx","title":"Developing for pipx","text":"<p>If you are a developer and want to be able to run</p> <pre><code>pipx install MY_PACKAGE\n</code></pre> <p>make sure you include <code>scripts</code> and, optionally for Windows GUI applications <code>gui-scripts</code>, sections under your main table<sup>1</sup> in <code>pyproject.toml</code> or their legacy equivalents for <code>setup.cfg</code> and <code>setup.py</code>.</p> pyproject.tomlsetup.cfgsetup.py <pre><code>[project.scripts]\nfoo = \"my_package.some_module:main_func\"\nbar = \"other_module:some_func\"\n\n[project.gui-scripts]\nbaz = \"my_package_gui:start_func\"\n</code></pre> <pre><code>[options.entry_points]\nconsole_scripts =\nfoo = my_package.some_module:main_func\nbar = other_module:some_func\ngui_scripts =\nbaz = my_package_gui:start_func\n</code></pre> <pre><code>setup(\n    # other arguments here...\n    entry_points={\n        'console_scripts': [\n            'foo = my_package.some_module:main_func',\n            'bar = other_module:some_func',\n        ],\n        'gui_scripts': [\n            'baz = my_package_gui:start_func',\n        ]\n    },\n)\n</code></pre> <p>In this case <code>foo</code> and <code>bar</code> (and <code>baz</code> on Windows) would be available as \"applications\" to pipx after installing the above example package, invoking their corresponding entry point functions.</p>"},{"location":"how-pipx-works.html#manual-pages","title":"Manual pages","text":"<p>If you wish to provide documentation via <code>man</code> pages on UNIX-like systems then these can be added as data files:</p> setuptools pyproject.toml<pre><code>[tool.setuptools.data-files]\n\"share/man/man1\" = [\n\"manpage.1\",\n]\n</code></pre> setup.cfg<pre><code>[options.data_files]\nshare/man/man1 =\nmanpage.1\n</code></pre> setup.py<pre><code>setup(\n    # other arguments here...\n    data_files=[('share/man/man1', ['manpage.1'])]\n)\n</code></pre> <p>Warning</p> <p>The <code>data-files</code> keyword is \"discouraged\" in the setuptools documentation but there is no alternative if <code>man</code> pages are a requirement.</p> pdm-backend pyproject.toml<pre><code>[tool.pdm.build]\nsource-includes = [\"share\"]\n\n[tool.pdm.build.wheel-data]\ndata = [\n{path = \"share/man/man1/*\", relative-to = \".\"},\n]\n</code></pre> <p>In this case the manual page <code>manpage.1</code> could be accessed by the user after installing the above example package.</p> <p>For a real-world example, see pycowsay's <code>setup.py</code> source code.</p> <p>You can read more about entry points here.</p> <ol> <li> <p>This is often the <code>[project]</code> table, but might also be differently named. Read more in the PyPUG.\u00a0\u21a9</p> </li> </ol>"},{"location":"installation.html","title":"Installation","text":""},{"location":"installation.html#system-requirements","title":"System Requirements","text":"<p>python 3.8+ is required to install pipx. pipx can run binaries from packages with Python 3.3+. Don't have Python 3.8 or later? See Python 3 Installation &amp; Setup Guide.</p> <p>You also need to have <code>pip</code> installed on your machine for <code>python3</code>. Installing it varies from system to system. Consult pip's installation instructions. Installing on Linux works best with a Linux Package Manager.</p> <p>pipx works on macOS, linux, and Windows.</p> <p></p>"},{"location":"installation.html#installing-pipx","title":"Installing pipx","text":""},{"location":"installation.html#on-macos","title":"On macOS:","text":"<pre><code>brew install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions in global scope. See \"Global installation\" section below.\n</code></pre>"},{"location":"installation.html#on-linux","title":"On Linux:","text":"<ul> <li>Ubuntu 23.04 or above</li> </ul> <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions in global scope. See \"Global installation\" section below.\n</code></pre> <ul> <li>Fedora:</li> </ul> <pre><code>sudo dnf install pipx\npipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions in global scope. See \"Global installation\" section below.\n</code></pre> <ul> <li>Using <code>pip</code> on other distributions:</li> </ul> <pre><code>python3 -m pip install --user pipx\npython3 -m pipx ensurepath\nsudo pipx ensurepath --global # optional to allow pipx actions in global scope. See \"Global installation\" section below.\n</code></pre>"},{"location":"installation.html#on-windows","title":"On Windows:","text":"<ul> <li>Install via Scoop:</li> </ul> <pre><code>scoop install pipx\npipx ensurepath\n</code></pre> <ul> <li>Install via pip (requires pip 19.0 or later)</li> </ul> <pre><code># If you installed python using Microsoft Store, replace `py` with `python3` in the next line.\npy -m pip install --user pipx\n</code></pre> <p>It is possible (even most likely) the above finishes with a WARNING looking similar to this:</p> <pre><code>WARNING: The script pipx.exe is installed in `&lt;USER folder&gt;\\AppData\\Roaming\\Python\\Python3x\\Scripts` which is not on PATH\n</code></pre> <p>If so, go to the mentioned folder, allowing you to run the pipx executable directly. Enter the following line (even if you did not get the warning):</p> <pre><code>.\\pipx.exe ensurepath\n</code></pre> <p>This will add both the above mentioned path and the <code>%USERPROFILE%\\.local\\bin</code> folder to your search path. Restart your terminal session and verify <code>pipx</code> does run.</p> <p>Warning</p> <p>It is not recommended to install <code>pipx</code> via <code>pipx</code>. If you'd like to do this anyway, take a look at the <code>pipx-in-pipx</code> project and read about the limitations there.</p>"},{"location":"installation.html#using-pipx-without-installing-via-zipapp","title":"Using pipx without installing (via zipapp)","text":"<p>The zipapp can be downloaded from Github releases and you can invoke it with a Python 3.8+ interpreter:</p> <pre><code>python pipx.pyz ensurepath\n</code></pre>"},{"location":"installation.html#using-pipx-with-pre-commit","title":"Using pipx with pre-commit","text":"<p>Pipx has pre-commit support. This lets you run applications:</p> <ul> <li>That can be run using <code>pipx run</code> but don't have native pre-commit support.</li> <li>Using its prebuilt wheel from pypi.org instead of building it from source.</li> <li>Using pipx's <code>--spec</code> and <code>--index-url</code> flags.</li> </ul> <p>Example configuration for use of the code linter yapf. This is to be added to your <code>.pre-commit-config.yaml</code>.</p> <pre><code>- repo: https://github.com/pypa/pipx\nrev: 1.5.0\nhooks:\n- id: pipx\nalias: yapf\nname: yapf\nargs: [\"yapf\", \"-i\"]\ntypes: [\"python\"]\n</code></pre>"},{"location":"installation.html#installation-options","title":"Installation Options","text":"<p>The default binary location for pipx-installed apps is <code>~/.local/bin</code>. This can be overridden with the environment variable <code>PIPX_BIN_DIR</code>. The default manual page location for pipx-installed apps is <code>~/.local/share/man</code>. This can be overridden with the environment variable <code>PIPX_MAN_DIR</code>.</p> <p>pipx's default virtual environment location is typically <code>~/.local/share/pipx</code> on Linux/Unix, <code>~/.local/pipx</code> on MacOS and <code>~\\pipx</code> on Windows. For compatibility reasons, if <code>~/.local/pipx</code> on Linux, <code>%USERPROFILE%\\AppData\\Local\\pipx</code> or <code>~\\.local\\pipx</code> on Windows or <code>~/Library/Application Support/pipx</code> on MacOS exists, it will be used as the default location instead. This can be overridden with the <code>PIPX_HOME</code> environment variable.</p> <p>In case one of these fallback locations exist, we recommend either manually moving the pipx files to the new default location (see the <code>Troubleshooting</code> section of the docs), or setting the <code>PIPX_HOME</code> environment variable (discarding files existing in the fallback location).</p> <p>As an example, you can install global apps accessible by all users on your system with the following command (on MacOS, Linux, and Windows WSL):</p> <pre><code>sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin PIPX_MAN_DIR=/usr/local/share/man pipx install PACKAGE\n# Example: $ sudo PIPX_HOME=/opt/pipx PIPX_BIN_DIR=/usr/local/bin PIPX_MAN_DIR=/usr/local/share/man pipx install cowsay\n</code></pre> <p>Note</p> <p>After version 1.2.0, the default pipx paths have been moved from <code>~/.local/pipx</code> to specific user data directories on each platform using platformdirs library</p> Old Path New Path <code>~/.local/pipx/.trash</code> <code>platformdirs.user_data_dir()/pipx/trash</code> <code>~/.local/pipx/shared</code> <code>platformdirs.user_data_dir()/pipx/shared</code> <code>~/.local/pipx/venvs</code> <code>platformdirs.user_data_dir()/pipx/venv</code> <code>~/.local/pipx/.cache</code> <code>platformdirs.user_cache_dir()/pipx</code> <code>~/.local/pipx/logs</code> <code>platformdirs.user_log_dir()/pipx/log</code> <p><code>user_data_dir()</code>, <code>user_cache_dir()</code> and <code>user_log_dir()</code> resolve to appropriate platform-specific user data, cache and log directories. See the platformdirs documentation for details.</p> <p>This was reverted in 1.5.0 for Windows and MacOS. We heavily recommend not using these locations on Windows and MacOS anymore, due to multiple incompatibilities discovered with these locations, documented here.</p>"},{"location":"installation.html#global-installation","title":"Global installation","text":"<p>Pipx also comes with a <code>--global</code> argument which helps to execute actions in global scope which exposes the app to all system users. By default the global binary location is set to <code>/usr/local/bin</code> and can be overridden with the environment variable <code>PIPX_GLOBAL_BIN_DIR</code>. Default global manual page location is <code>/usr/local/share/man</code>. This can be overridden with environment variable <code>PIPX_GLOBAL_MAN_DIR</code>. Finally, default global virtual environment location is <code>/opt/pipx</code>, can be overridden with environment variable <code>PIPX_GLOBAL_HOME</code>. Make sure to run <code>sudo pipx ensurepath --global</code> if you intend to use this feature.</p> <p>Note that the <code>--global</code> argument is not supported on Windows.</p>"},{"location":"installation.html#upgrade-pipx","title":"Upgrade pipx","text":"<p>On macOS:</p> <pre><code>brew update &amp;&amp; brew upgrade pipx\n</code></pre> <p>On Ubuntu Linux:</p> <pre><code>sudo apt upgrade pipx\n</code></pre> <p>On Fedora Linux:</p> <pre><code>sudo dnf update pipx\n</code></pre> <p>On Windows:</p> <pre><code>scoop update pipx\n</code></pre> <p>Otherwise, upgrade via pip:</p> <pre><code>python3 -m pip install --user -U pipx\n</code></pre>"},{"location":"installation.html#note-upgrading-pipx-from-a-pre-01500-version-to-01500-or-later","title":"Note: Upgrading pipx from a pre-0.15.0.0 version to 0.15.0.0 or later","text":"<p>After upgrading to pipx 0.15.0.0 or above from a pre-0.15.0.0 version, you must re-install all packages to take advantage of the new persistent pipx metadata files introduced in the 0.15.0.0 release. These metadata files store pip specification values, injected packages, any custom pip arguments, and more in each main package's venv.</p> <p>If you have no packages installed using the <code>--spec</code> option, and no venvs with injected packages, you can do this by running <code>pipx reinstall-all</code>.</p> <p>If you have any packages installed using the <code>--spec</code> option or venvs with injected packages, you should reinstall packages manually using <code>pipx uninstall-all</code>, followed by <code>pipx install</code> and possibly <code>pipx inject</code>.</p>"},{"location":"installation.html#shell-completion","title":"Shell Completion","text":"<p>You can easily get your shell's tab completions working by following instructions printed with this command:</p> <pre><code>pipx completions\n</code></pre>"},{"location":"programs-to-try.html","title":"Programs to Try","text":""},{"location":"programs-to-try.html#programs","title":"Programs","text":"<p>Here are some programs you can try out. If you've never used the program before, make sure you add the <code>--help</code> flag so it doesn't do something you don't expect. If you decide you want to install, you can run <code>pipx install PACKAGE</code> instead.</p>"},{"location":"programs-to-try.html#ansible","title":"ansible","text":"<p>IT automation</p> <pre><code>pipx install --include-deps ansible\n</code></pre>"},{"location":"programs-to-try.html#asciinema","title":"asciinema","text":"<p>Record and share your terminal sessions, the right way.</p> <pre><code>pipx run asciinema\n</code></pre>"},{"location":"programs-to-try.html#black","title":"black","text":"<p>uncompromising Python code formatter</p> <pre><code>pipx run black\n</code></pre>"},{"location":"programs-to-try.html#pybabel","title":"pybabel","text":"<p>internationalizing and localizing Python applications</p> <pre><code>pipx run --spec=babel pybabel --help\n</code></pre>"},{"location":"programs-to-try.html#chardetect","title":"chardetect","text":"<p>detect file encoding</p> <pre><code>pipx run --spec=chardet chardetect --help\n</code></pre>"},{"location":"programs-to-try.html#cookiecutter","title":"cookiecutter","text":"<p>creates projects from project templates</p> <pre><code>pipx run cookiecutter\n</code></pre>"},{"location":"programs-to-try.html#create-python-package","title":"create-python-package","text":"<p>easily create and publish new Python packages</p> <pre><code>pipx run create-python-package\n</code></pre>"},{"location":"programs-to-try.html#flake8","title":"flake8","text":"<p>tool for style guide enforcement</p> <pre><code>pipx run flake8\n</code></pre>"},{"location":"programs-to-try.html#gdbgui","title":"gdbgui","text":"<p>browser-based gdb debugger</p> <pre><code>pipx run gdbgui\n</code></pre>"},{"location":"programs-to-try.html#hatch","title":"hatch","text":"<p>Python project manager that lets you build &amp; publish packages, run tasks in environments and more</p> <pre><code>pipx run hatch\n</code></pre>"},{"location":"programs-to-try.html#hexsticker","title":"hexsticker","text":"<p>create hexagon stickers automatically</p> <pre><code>pipx run hexsticker\n</code></pre>"},{"location":"programs-to-try.html#ipython","title":"ipython","text":"<p>powerful interactive Python shell</p> <pre><code>pipx run ipython\n</code></pre>"},{"location":"programs-to-try.html#jupyter","title":"jupyter","text":"<p>web-based notebook environment for interactive computing</p> <pre><code>pipx run jupyter\n</code></pre>"},{"location":"programs-to-try.html#pipenv","title":"pipenv","text":"<p>python dependency/environment management</p> <pre><code>pipx run pipenv\n</code></pre>"},{"location":"programs-to-try.html#poetry","title":"poetry","text":"<p>python dependency/environment/packaging management</p> <pre><code>pipx run poetry\n</code></pre>"},{"location":"programs-to-try.html#pylint","title":"pylint","text":"<p>source code analyzer</p> <pre><code>pipx run pylint\n</code></pre>"},{"location":"programs-to-try.html#pyinstaller","title":"pyinstaller","text":"<p>bundles a Python application and all its dependencies into a single package</p> <pre><code>pipx run pyinstaller\n</code></pre>"},{"location":"programs-to-try.html#pyxtermjs","title":"pyxtermjs","text":"<p>fully functional terminal in the browser</p> <pre><code>pipx run pyxtermjs\n</code></pre>"},{"location":"programs-to-try.html#ruff","title":"ruff","text":"<p>An extremely fast Python linter</p> <pre><code>pipx run ruff\n</code></pre>"},{"location":"programs-to-try.html#shell-functools","title":"shell-functools","text":"<p>Functional programming tools for the shell</p> <pre><code>pipx install shell-functools\n</code></pre>"},{"location":"troubleshooting.html","title":"Troubleshooting","text":""},{"location":"troubleshooting.html#reinstall-all-fixes-most-issues","title":"<code>reinstall-all</code> fixes most issues","text":"<p>The following command should fix many problems you may encounter as a pipx user:</p> <pre><code>pipx reinstall-all\n</code></pre> <p>This is a good fix for the following problems:</p> <ul> <li>System python was upgraded and the python used with a pipx-installed package is no longer available</li> <li>pipx upgrade causes issues with old pipx-installed packages</li> </ul> <p>pipx has been upgraded a lot over the years. If you are a long-standing pipx user (thanks, by the way!) then you may have old pipx-installed packages that have internal data that is different than what pipx currently expects. By executing <code>pipx reinstall-all</code>, pipx will re-write its internal data and this should fix many of issues you may encounter.</p> <p>Note: If your pipx-installed package was installed using a pipx version before 0.15.0.0 and you want to specify particular options, then you may want to uninstall and install it manually:</p> <pre><code>pipx uninstall &lt;mypackage&gt;\npipx install &lt;mypackage&gt;\n</code></pre>"},{"location":"troubleshooting.html#diagnosing-problems-using-list","title":"Diagnosing problems using <code>list</code>","text":"<pre><code>pipx list\n</code></pre> <p>will not only list all of your pipx-installed packages, but can also diagnose some problems with them, as well as suggest solutions.</p>"},{"location":"troubleshooting.html#specifying-pipx-options","title":"Specifying pipx options","text":"<p>The most reliable method to specify command-line options that require an argument is to use an <code>=</code>-sign. An example:</p> <pre><code>pipx install pycowsay --pip-args=\"--no-cache-dir\"\n</code></pre> <p>Another example for ignoring ssl/tls errors:</p> <pre><code>pipx install termpair --pip-args '--trusted-host files.pythonhosted.org --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host github.com'\"\n</code></pre>"},{"location":"troubleshooting.html#check-for-pip_-environment-variables","title":"Check for <code>PIP_*</code> environment variables","text":"<p>pipx uses <code>pip</code> to install and manage packages. If you see pipx exhibiting strange behavior on install or upgrade, check that you don't have special environment variables that affect <code>pip</code>'s behavior in your environment.</p> <p>To check for <code>pip</code> environment variables, execute the following depending on your system:</p>"},{"location":"troubleshooting.html#unix-or-macos","title":"Unix or macOS","text":"<pre><code>env | grep '^PIP_'\n</code></pre>"},{"location":"troubleshooting.html#windows-powershell","title":"Windows PowerShell","text":"<pre><code>ls env:PIP_*\n</code></pre>"},{"location":"troubleshooting.html#windows-cmd","title":"Windows <code>cmd</code>","text":"<pre><code>set PIP_\n</code></pre> <p>Reference: pip Environment Variables</p>"},{"location":"troubleshooting.html#pipx-log-files","title":"<code>pipx</code> log files","text":"<p>Pipx records a verbose log file for every <code>pipx</code> command invocation. The logs for the last 10 <code>pipx</code> commands can be found in <code>$XDG_STATE_HOME/pipx/logs</code> or user's log path if the former is not writable by the user.</p> <p>For most users this location is <code>~/.local/state/pipx/logs</code>, where <code>~</code> is your home directory.</p>"},{"location":"troubleshooting.html#debian-ubuntu-issues","title":"Debian, Ubuntu issues","text":"<p>If you have issues using pipx on Debian, Ubuntu, or other Debian-based linux distributions, make sure you have the following packages installed on your system. (Debian systems do not install these by default with their python installations.)</p> <pre><code>sudo apt install python3-venv python3-pip\n</code></pre> <p>Reference: Python Packaging User Guide: Installing pip/setuptools/wheel with Linux Package Managers</p>"},{"location":"troubleshooting.html#macos-issues","title":"macOS issues","text":"<p>If you want to use a Pipx-installed package in a shebang (a common example is the AWS CLI), you will likely not be able to, because the binary will be stored under <code>~/Library/Application Support/pipx/</code>. The space in the path is not supported in a shebang. A simple solution is symlinking <code>~/Library/Application Support/pipx</code> to <code>~/Library/ApplicationSupport/pipx</code>, and using that as the path in the shebang instead.</p> <pre><code>mkdir $HOME/Library/ApplicationSupport\nln -s $HOME/Library/Application\\ Support/pipx $HOME/Library/ApplicationSupport/pipx\n</code></pre>"},{"location":"troubleshooting.html#does-it-work-to-install-your-package-with-pip","title":"Does it work to install your package with <code>pip</code>?","text":"<p>This is a tip for advanced users. An easy way to check if pipx is the problem or a package you're trying to install is the problem, is to try installing it using <code>pip</code>. For example:</p>"},{"location":"troubleshooting.html#unix-or-macos_1","title":"Unix or macOS","text":"<pre><code>python3 -m venv test_venv\ntest_venv/bin/python3 -m pip install &lt;problem-package&gt;\n</code></pre>"},{"location":"troubleshooting.html#windows","title":"Windows","text":"<pre><code>python -m venv test_venv\ntest_venv/Scripts/python -m pip install &lt;problem-package&gt;\n</code></pre> <p>If installation into this \"virtual environment\" using pip fails, then it's likely that the problem is with the package or your host system.</p> <p>To clean up after this experiment:</p> <pre><code>rm -rf test_venv\n</code></pre>"},{"location":"troubleshooting.html#pipx-files-not-in-expected-locations-according-to-documentation","title":"Pipx files not in expected locations according to documentation","text":"<p>Pipx versions after 1.2.0 adopt the XDG base directory specification for the location of <code>PIPX_HOME</code> and the data, cache, and log directories. Version 1.2.0 and earlier use <code>~/.local/pipx</code> as the default <code>PIPX_HOME</code> and install the data, cache, and log directories under it. To maintain compatibility with older versions, pipx will automatically use this old <code>PIPX_HOME</code> path if it exists. For a map of old and new paths, see Installation.</p> <p>In Pipx version 1.5.0, this was reverted for Windows and MacOS. It defaults again to <code>~/.local/pipx</code> on MacOS and to <code>~\\pipx</code> on Windows.</p> <p>If you have a <code>pipx</code> version later than 1.2.0 and want to migrate from the old path to the new paths, you can move the <code>~/.local/pipx</code> directory to the new location (after removing cache, log, and trash directories which will get recreated automatically) and then reinstall all packages. For example, on Linux systems, <code>PIPX_HOME</code> moves from <code>~/.local/pipx</code> to <code>~/.local/share/pipx</code> so you can do this:</p> <pre><code>rm -rf ~/.local/pipx/{.cache,logs,trash}\nmkdir -p ~/.local/share &amp;&amp; mv ~/.local/pipx ~/.local/share/\npipx reinstall-all\n</code></pre> <p>For moving the paths back after 1.5.0, you can perform the same steps, switching the paths around.</p>"}]}